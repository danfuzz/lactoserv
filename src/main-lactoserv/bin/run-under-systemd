#!/bin/bash
#
# Copyright 2022-2025 the Lactoserv Authors (Dan Bornstein et alia).
# SPDX-License-Identifier: Apache-2.0

#
# Helper for running under `systemd`: Manages a `lactoserv` process, or (for
# development) runs it in the foreground.
#

# Figure out the symlink-resolved program name and directory.
cmdName="$(readlink -f "$0")" || exit "$?"
cmdDir="${cmdName%/*}"
cmdName="${cmdName##*/}"
baseDir="${cmdDir%/*}"


#
# Argument parsing
#

function usage {
    echo 1>&2 'Usage:'
    echo 1>&2 "  ${cmdName} run-foreground <system-arg> ..."
    echo 1>&2 "  ${cmdName} --service-name=<name> start <system-arg> ..."
    echo 1>&2 "  ${cmdName} --service-name=<name> reload"
    echo 1>&2 "  ${cmdName} --service-name=<name> stop"
    exit 1
}

# Command.
command=''

# Service name.
serviceName=''

# Arguments to pass through when starting the system.
systemArgs=()

while (( $# != 0 )); do
    case "$1" in
        --service-name=*)
            serviceName="${1#*=}"
            ;;
        --)
            # Explicit end of options.
            shift
            break
            ;;
        -?*)
            echo 1>&2 "Unknown option: $1"
            usage
            ;;
        *)
            # Non-option argument.
            break
            ;;
    esac

    shift
done

if (( $# == 0 )); then
    echo 1>&2 'Missing command.'
    usage
fi

command="$1"
shift

if [[ ${command} =~ ^(run-foreground|start)$ ]]; then
    if (( $# == 0 )); then
        echo 1>&2 'Service arguments required when starting service.'
        usage
    fi
    systemArgs=("$@")
else
    if (( $# != 0 )); then
        echo 1>&2 'Service arguments not allowed when manipulating a running service.'
        usage
    fi
fi

if [[ (${command} != 'run-foreground') && (${serviceName} == '') ]]; then
    echo 1>&2 "Option --service-name required for command: ${command}"
    usage
fi


#
# Helper functions
#

# Runs the system in the foreground.
function do-run-foreground {
    export LACTOSERV_SERVICE_NAME="${serviceName}"
    exec "${runCmd}" --log-to-stdout "${systemArgs[@]}"
}

# Starts the system, daemon-style.
function do-start {
    local fullCommand=("${runCmd}" --print-node-command "${systemArgs[@]}")

    local lactoservFds
    lactoservFds="$(make-lactoserv-fds)" \
    || return "$?"

    if [[ ${lactoservFds} != '' ]]; then
        export LACTOSERV_FDS="${lactoservFds}"
    fi

    export LACTOSERV_SERVICE_NAME="${serviceName}"

    # Write the command about to be executed to the log. Note: In a typical OS
    # configuration, the service-specific log can be seen with `journalctl
    # --unit=<service-name>`, where <service-name> is the name of the systemd
    # service that runs this command, e.g. probably `lactoserv` or some variant
    # thereof.
    echo 1>&2 'Running system via command:'
    printf 1>&2 '  %q\n' "${fullCommand[@]}"

    # Note: `exec` is required so that the process running this script
    # ultimately becomes the process actually running the service. (If that
    # turns out not to be the case, then the `systemd` configuration will need
    # to be adjusted.)
    exec "${fullCommand[@]}"
}

# Tells a daemon that's running to reload.
function do-reload {
    local pid

    pid="$(get-service-pid)" \
    || return "$?"

    kill -HUP "${pid}"
}

# Stops a daemon that's running.
function do-stop {
    local pid

    pid="$(get-service-pid)" \
    || return "$?"

    kill "${pid}"
}

# Gets the main PID for the given service.
function get-service-pid {
    local result

    result="$(systemctl show --property=MainPID "${serviceName}")" \
    || return "$?"

    if [[ ${result} =~ ^MainPID=(.*)$ ]]; then
        echo "${BASH_REMATCH[1]}"
    else
        printf 1>&2 'Strange output: %q\n' "${result}"
        return 1
    fi
}

# Generates a value for `LACTOSERV_FDS`, based on what `systemd` put in the
# environment variables it uses. The point is to avoid "infecting" a Lactoserv
# config file with `systemd`-specific knowledge, and to make it a bit easier to
# wrangle too.
function make-lactoserv-fds {
    if [[ (${LISTEN_FDNAMES} == '') || (${LISTEN_PID} != $$) ]]; then
        # The FDs aren't actually for this process. (Unexpected case, but it
        # can happen.)
        return
    fi

    local result=''

    local fdNames="${LISTEN_FDNAMES}"
    local fd=3 # `systemd` binds FDs starting at #3.

    while [[ ${fdNames} =~ ^([^:]+)(:(.*))?$ ]]; do
        if (( ${#result} != 0 )); then
            result+=', '
        fi
        result+="\"${BASH_REMATCH[1]}\": \"/dev/fd/${fd}\""
        (( fd++ ))
        fdNames="${BASH_REMATCH[3]}"
    done

    result="{ ${result} }"
    echo 1>&2 "Sockets from systemd: ${result}"
    echo "${result}"
}


#
# Main script
#

runCmd="${cmdDir}/run"
commandFunc="do-${command}"

if ! declare -F "${commandFunc}" >/dev/null; then
    echo 1>&2 "Unknown command: ${command}"
    usage
fi

"${commandFunc}" || exit "$?"
