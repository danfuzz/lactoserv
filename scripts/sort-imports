#!/bin/bash
#
# Copyright 2022-2023 the Lactoserv Authors (Dan Bornstein et alia).
# SPDX-License-Identifier: Apache-2.0

. "$(dirname "$(readlink -f "$0")")/lib/init.sh" || exit "$?"


#
# Argument parsing
#

function usage {
    print-usage $'
    Usage:

    ${name} [<opt> ...] [<file> ...]
      Sorts imports in `.js` files according to this project\'s preferred
      ordering. With <file>s, processes only the indicated files; otherwise
      processes the entire source tree.

    ${name} [--help | -h]
      Displays this message.
    '

    exit "$@"
}

# Want help?
opt-action --call='{ usage }' help/h

# Specific paths to process
rest-arg --var=files --filter=/./ file

process-args "$@" || usage "$?"


#
# Helper functions
#

# The actual import-sorting AWK script.
SORTER_AWK=$'
BEGIN {
    collecting  = 0;
    count       = 0;
    inImport    = 0;
    import      = "";
}

!importsDone && /^import/ {
    collecting = 1;
}

# Collect and process a possibly-multi-line import.
collecting && /^import / {
    inImport  = 1;
    import    = "";
}
inImport {
    if (import == "") {
        import = $0;
    } else {
        import = import "\\n" $0;
    }
}
inImport && / from / {
    inImport = 0;
}
inImport {
    next;
}
import != "" {
    items  = import;
    import = "";

    sub(/^import[ \\n]+/, "", items);
    sub(/[\\n ]+from .*$/, "", items);
    from = $0;
    sub(/^.* from [\'"]/, "", from);
    sub(/[\'"].*/, "", from);
    if (match(from, /^#/) != 0) {
        key = from;
        sub(/^[^\\/]*/, "", key);
        key = "D/" key;
    } else if (match(from, /^@this/) != 0) {
        key = "C/" from;
    } else if (match(from, /^node:/) != 0) {
        key = "A/" from;
    } else {
        key = "B/" from;
    }
    suffix = $0;
    sub(/[^;]*/, "", suffix);
    imports[++count] = key " :: " items " :: " from " :: " suffix;
    next;
}

collecting && /^ *$/ {
    next;
}

collecting {
    collecting = 0;
    importsDone = 1;

    sort(imports);

    lastTag = "";
    for (i = 1; i <= count; i++) {
        split(imports[i], parts, / :: /);
        tag    = substr(parts[1], 1, 1);
        items  = parts[2];
        from   = parts[3];
        suffix = parts[4];
        if (tag != lastTag) {
            if (lastTag != "") {
                print "";
            }
            lastTag = tag;
        }
        printf("import %s from \'%s\'%s\\n", fixItems(items), from, suffix);
    }

    print "";
    print "";

    # Fall through and print the first non-`import` line.
}

!collecting {
    print;
}

# Good ole selection sort.
function sort(array, withLocals, i, j, size, tmp) {
    size = length(array);
    for (i = 1; i < size; i++) {
        for (j = i + 1; j <= size; j++) {
            if (array[i] > array[j]) {
                tmp = array[i];
                array[i] = array[j];
                array[j] = tmp;
            }
        }
    }
}

# Fix up the import items within a line.
function fixItems(items, withLocals, array, i, len, multiline) {
    if (match(items, /^[{].*[}]$/) == 0) {
        # Not sortable.
        return items;
    }

    sub(/^[{][ \\n]*/, "", items);
    sub(/[ \\n]*[}]$/, "", items);
    split(items, array, /,[ \\n]*/);
    sort(array);
    items = "{ ";

    len = 0;
    multiline = 0;
    for (i = 1; i <= length(array); i++) {
        if (i != 1) items = items ", ";
        len += 2;
        if ((len + length(array[i])) > 70) {
            items = items "\\n  ";
            len = 0;
            multiline = 1;
        }
        items = items array[i];
        len += length(array[i]);
    }

    items = items " }";
    if (multiline) {
        items = items "\\n ";
    }
    return items;
}
'

# Runs the fixer on the given file.
function do-sort {
    local inFile="$1"
    local tmpFile="$1.new"

    awk <"${inFile}" >"${tmpFile}" "${SORTER_AWK}" \
    || return "$?"

    if cmp --quiet "${inFile}" "${tmpFile}"; then
        rm "${tmpFile}"
    else
        mv "${tmpFile}" "${inFile}"
    fi
}


#
# Main script
#

srcDir="$(base-dir)/src"

if (( ${#files[@]} == 0 )); then
    cd "${srcDir}"
    files=($(find . -name '*.js' | sort))
fi

for file in "${files[@]}"; do
    info-msg "Processing ${file}..."
    do-sort "${file}" || exit "$?"
done

info-msg ''
info-msg 'Done!'
