#!/bin/bash
#
# Copyright 2022 Dan Bornstein. All rights reserved.
# All code and assets are considered proprietary and unlicensed.

. "$(dirname "$(readlink -f "$0")")/lib/init.sh" || exit "$?"

#
# Argument parsing
#

function usage {
    print-usage $'
    Usage:

    ${name} [<opt> ...] <project-name>
      Builds a JavaScript (sub)project.

    --allow-platform-specific-files
      If specified, the build does *not* check to see if any platform-specific
      files ended up in the built output.
    --clean
      Do a clean build for the project. This will attempt to clean out *just*
      the stuff for the named project.
    --clean-all
      Do a completely clean build. This will erase the entire built-output
      directory.
    --out=<dir>
      Directory where built output goes. Defaults to `out` directly under the
      main product directory.

    ${name} [--help | -h]
      Displays this message.
    '

    exit "$@"
}

# Want help?
opt-action --call='{ usage }' help/h

# Allow the build to be platform-specific?
opt-toggle --var=platformSpecific allow-platform-specific-files

# Clean project build?
opt-toggle --var=doCleanProject clean

# Completely clean build?
opt-toggle --var=doCleanAll clean-all

# Built output directory.
opt-value --var=outDir out

# Project name.
positional-arg --filter='/^[-a-z0-9]+$/' --var=projectName project-name

process-args "$@" || usage "$?"


#
# Helper functions
#

# The main actions of this script. The "main module" is taken to be `main-<name>`.
function build-js-project {
    local projectName="$1"
    local destDir="$2"

    local mainModule="main-${projectName}"
    local localCodeDirName='code'
    local destLocalCode="${destDir}/${localCodeDirName}"
    local destLocalModules="${destLocalCode}/node_modules"

    progress-msg "Main module: ${mainModule}"

    mkdir -p "${destLocalModules}" \
    || return "$?"

    # Figure out local vs. external dependencies.

    progress-msg 'Determining local and external dependencies...'

    local deps
    deps="$(lib find-module-dependencies "${mainModule}")" \
    || return "$?"

    # Construct a top-level package.json.

    progress-msg 'Making `package.json`...'

    jget >"${destDir}/package.json" \
        --file="${srcDir}/pkg/${mainModule}/package.json" \
        localCodeDirName="${localCodeDirName}" \
        deps:json="${deps}" \
        projectName="${projectName}" '
    . | del(.imports) +
    {
        name:         ("top-of-" + $projectName),
        dependencies: $deps.extDeps,
        exports:      ("./" + $localCodeDirName + "/index.js")
    }' \
    || return "$?"

    # Write a top-level `index.js`.

    progress-msg 'Making `index.js`...'

    (
        for (( n = 0; n < 10; n++ )); do
            echo "// FILE GENERATED BY SCRIPT \`$(this-cmd-name)\`. DO NOT EDIT!"
        done
        echo ''
        echo "import { default as main } from '@this/${mainModule}';"
        echo ''
        echo 'await main();'
        echo ''
        echo '// `main()` is not expected to ever return.'
        echo $'throw new Error(\'Shouldn\\\'t happen.\');'
    ) > "${destLocalCode}/index.js"

    # Copy all the local modules.
    #
    # Note: The `jget` command outputs an `eval`able script to perform the
    # copies.

    progress-msg 'Copying local modules...'

    local moduleFromDir="${srcDir}/pkg"
    local copyCmd
    copyCmd="$(
        jget --output=raw "${deps}" \
            cmd='lib rsync-local' \
            fromDir="${moduleFromDir}" \
            toDir="${destLocalModules}" '
        .localDeps
        |
        map({
                fromPath: ($fromDir + "/" + (. | sub("^[^/]*/"; "") + "/") | @sh),
                toPath:   ($toDir + "/" + . | @sh)
            }
            |
            "mkdir -p " + .toPath,
            $cmd + " " + .fromPath + " " + .toPath
            |
            "&& " + . + " \\"
        )
        |
        ["true \\"] + . + ["&& true"]
        |
        join("\n")
        '
    )" \
    || return "$?"

    eval "${copyCmd}"

    remove-dead-local-modules "${destLocalModules}" "${deps}" \
    || return "$?"

    npm-install "${destDir}"
}

# Does an `npm install` in the given directory.
#
# TODO: Figure out how to run safely. (E.g. fetch first and then run the actual
# install in an environment with no networking.)
function npm-install {
    local dir="$1"

    progress-msg 'Fetching and installing external dependencies...'
    progress-msg

    (
        cd "${dir}"
        npm install --no-fund --omit=dev
    ) \
    || return "$?"
}

# Removes any local modules that are "dead" with respect to the current build.
# These are modules that (presumably) used to be part of the build but got
# dropped for whatever reason.
function remove-dead-local-modules {
    local dir="$1"
    local deps="$2"

    local deadModules
    deadModules="$(
        cd "${dir}"
        lib json-find . -mindepth 2 -maxdepth 2 -type d -printjson \
        | jval --input=slurp \
            deps:json="${deps}" \
            'map(ltrimstr("./")) - $deps.localDeps'
    )" \
    || return "$?"

    if [[ ${deadModules} != '[]' ]]; then
        # The following generates an `eval`able script to perform the removals.
        local removalCmd
        removalCmd="$(
            jval \
                --output=raw \
                dir="${dir}" \
                deadModules:json="${deadModules}" '
            $deadModules
            |
            map(
                "progress-msg " + ("  " + . | @sh),
                "rm -rf " + ($dir + "/" + . | @sh)
                |
                "&& " + . + " \\"
            )
            |
            ["true \\"] + . + ["&& true"]
            |
            join("\n")
        ')"

        progress-msg 'Removing defunct local modules:'

        eval "${removalCmd}"

        progress-msg
    fi
}

# Sets up the output directory.
function set-up-out-dir {
    local extraOpts=()
    if (( doCleanAll )); then
        extraOpts=(--remove)
    fi

    lib out-dir --out="${outDir}" --create --print "${extraOpts[@]}"
}

# Checks a `node_modules` directory (or similar) for "suspect" files, given a
# desire to have a platform-agnostic build.
function suspect-file-check {
    local dir="$1"

    suspectFiles="$(
        cd "${dir}"
        find . -type f \
            '!' '(' \
                -name '*.js' -o -name '*.json' -o -name '*.html' -o -name '*.md' \
            ')' \
            -exec file '{}' ';' \
        | grep -Ev 'ASCII|JSON|PNG|UTF-8|empty|short file' \
        | awk '{ sub(/^\.\//, "  "); sub(/:[ \t].*$/, ""); print; }'
    )"

    if [[ ${suspectFiles} != '' ]]; then
        error-msg 'Files possibly containing platform-specific binaries:'
        error-msg -- "${suspectFiles}"
        return 1
    fi
}


#
# Main script
#

progress-msg --enable
progress-msg "Building JS project ${projectName}..."

baseDir="$(dirname "$(this-cmd-dir)")"
srcDir="${baseDir}/src"
outDir="$(set-up-out-dir)"

outProjectDir="${outDir}/${projectName}"

if (( doCleanProject )); then
    rm -rf "${outProjectDir}" \
    || exit "$?"
fi
mkdir -p "${outProjectDir}" \
|| exit "$?"

build-js-project "${projectName}" "${outProjectDir}" \
|| exit "$?"

if (( !platformSpecific )); then
    progress-msg 'Checking for platform agnosticity...'
    suspect-file-check "${outProjectDir}/node_modules" \
    || exit "$?"
fi

progress-msg
progress-msg "Built JS project ${projectName}."
