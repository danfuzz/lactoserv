#!/bin/bash
#
# Copyright 2022 Dan Bornstein. All rights reserved.
# All code and assets are considered proprietary and unlicensed.

. "$(dirname "$(readlink -f "$0")")/lib/init.sh" || exit "$?"

#
# Argument parsing
#

function usage {
    print-usage $'
    Usage:

    ${name} [<opt> ...]
      Builds the project.

    --clean
      Do a clean build.
    --dev
      Do a dev build (suitable for running tests).
    --out=<dir>
      Directory where built output goes. Defaults to `out` directly under the
      main product directory.

    ${name} [--help | -h]
      Displays this message.
    '

    exit "$@"
}

# Want help?
opt-action --call='{ usage }' help/h

# Clean build?
opt-toggle --var=doClean clean

# Dev (testing) build?
opt-toggle --var=doDev dev

# Built output directory.
opt-value --var=outDir out

process-args "$@" || usage "$?"


#
# Helper functions
#

# Fills in the `<hash>`es of the given local package set, based on the contents
# of the package JSON files.
function local-packages-fill-in-hashes {
    local localPackageSet="$1"

    local jsonFiles=($(jget --output=raw "${localPackageSet}" '.[] | .destJsonFile'))
    local f
    for f in "${jsonFiles[@]}"; do
        jget --file="${f}" \
            '{
                name: (.name | sub("^@[^/]+/(?<name>.*)$"; .name)),
                hash: .shasum[0:20]
            }'
    done \
    | jval --input=slurp result:json="${localPackageSet}" \
        'reduce .[] as $item ($result;
            .[$item.name].destPkgFile =
                (.[$item.name].destPkgFile | sub("<hash>"; $item.hash))
            |
            .[$item.name].destPkgUri =
                (.[$item.name].destPkgUri | sub("<hash>"; $item.hash))
        )'
}

# Gets the set of local packages, as a JSON object mapped from name to info
# objects. The result leaves the destination package file with a `<hash>` hole
# to be filled in.
function local-packages {
    local pkgDirName='local-pkg'
    local pkgSrcDir="${srcDir}/pkg"
    local srcPaths

    srcPaths=($(
        find "${pkgSrcDir}" -mindepth 2 -maxdepth 2 -name package.json \
            -exec dirname '{}' ';' \
            | sort
        ))

    (
        local p
        for p in "${srcPaths[@]}"; do
            jval \
                outCodeDir="${outCodeDir}" \
                pkgDirName="${pkgDirName}" \
                name="$(basename "${p}")" \
                srcPath="${p}" \
                '
                ($pkgDirName + "/" + $name) as $nameBase
                |
                ($nameBase + "-<hash>.tgz") as $pkgFile
                |
                {
                    ($name): {
                        name:         $name,
                        scopedName:   ("@this/" + $name),
                        srcPath:      $srcPath,
                        destDir:      ($outCodeDir + "/" + $pkgDirName),
                        destJsonFile: ($outCodeDir + "/" + $nameBase + ".json"),
                        destPkgFile:  ($outCodeDir + "/" + $pkgFile),
                        destPkgUri:   ("file:" + $pkgFile)
                    }
                }'
        done
    ) | jval --input=slurp 'reduce .[] as $item ({}; . + $item)'
}

# Packs all the local packages.
function pack-local-packages {
    local localPackageSet="$1"

    progress-msg "Packing local packages:"

    local allNames=($(jget --output=raw "${localPackageSet}" 'keys | .[]'))
    local n
    for n in "${allNames[@]}"; do
        progress-msg "  ${n}"

        local paths="$(jget "${localPackageSet}" name="${n}" '.[$name]')"
        local destDir="$(jget --output=raw "${paths}" '.destDir')"

        mkdir -p "${destDir}" || return "$?"

        cd "$(jget --output=raw "${paths}" '.srcPath')"

        local packageInfo
        packageInfo="$(npm pack --json --pack-destination="${destDir}")" \
        || exit "$?"

        # The JSON output from `npm pack` is wrapped in a top-level array
        # (because some invocations can emit multiple packages), but it's
        # superfluous here, so we unwrap with `.[0]`.
        packageInfo="$(jget "${packageInfo}" '.[0]')"

        cat <<<"${packageInfo}" >"$(jget --output=raw "${paths}" '.destJsonFile')"
    done
}

# Renames the local packages to their designated hash-based name.
function rename-local-packages {
    local localPackageSet="$1"

    progress-msg "Moving local packages:"

    local allNames=($(jget --output=raw "${localPackageSet}" 'keys | .[]'))
    local n
    for n in "${allNames[@]}"; do
        progress-msg "  ${n}"

        local paths="$(jget "${localPackageSet}" name="${n}" '.[$name]')"
        local pkgFrom="$(jget --output=raw "${paths}" '.destDir')/"

        pkgFrom+="$(jget --output=raw \
            --file="$(jget --output=raw "${paths}" '.destJsonFile')" \
            '
            .filename
            |
            sub("^@(?<scope>[^/]+)/(?<name>.*)$"; .scope + "-" + .name)
            '
        )"

        mv "${pkgFrom}" "$(jget --output=raw "${paths}" '.destPkgFile')" \
        || return "$?"
    done
}

# Sets up the output directory.
function set-up-out-dir {
    local extraOpts=()
    if (( doClean )); then
        extraOpts=(--remove)
    fi

    lib out-dir --out="${outDir}" --create --print "${extraOpts[@]}"
}

# Tidies things up after a successful build. Specifically, removes local
# packages and package info files that aren't used (anymore) by the build.
function tidy-up {
    local localPackageSet="$1"

    # Cheesy tactic used here: We combine the lists of "things that are used"
    # and "all the things" into a single sorted/counted list. If an item shows
    # up twice (it's in both lists), then it's used. If it only shows up once,
    # it's defunct and should be removed.

    local usedFiles=($(
        jget --output=raw "${localPackageSet}" \
            'to_entries[] | .value.destJsonFile, .value.destPkgFile'
    ))

    local dirs=($(
        for d in "${usedFiles[@]}"; do
            dirname "${d}"
        done \
        | sort | uniq
    ))

    local defunct=($(
        (
            printf '%s\n' "${usedFiles[@]}"
            find "${dirs[@]}" -type f
        ) \
        | sort | uniq -c | awk '$1 != 2 { print $2 }'
    ))

    if (( ${#defunct[@]} != 0 )); then
        progress-msg 'Removing defunct local package files:'
        for d in "${defunct[@]}"; do
            progress-msg "  $(basename "${d}")"
            rm -f "${d}"
        done
    fi
}

#
# Main script
#

progress-msg --enable

baseDir="$(dirname "$(this-cmd-dir)")"
srcDir="${baseDir}/src"
etcDir="${baseDir}/etc"
outDir="$(set-up-out-dir)"
outCodeDir="${outDir}/code"

# Make sure there's a cert to use.
lib make-localhost-cert \
|| exit "$?"

# Copy over the script binaries.
progress-msg 'Copying script binaries...'
(
    rm -rf "${outDir}/bin"
    mkdir -p "${outDir}/bin"
    cd "${etcDir}/bin-src"
    find . -type f '!' -name '*.md' \
        -exec cp '{}' "${outDir}/bin/{}" ';' \
        -exec chmod 755 "${outDir}/bin/{}" ';'
) \
|| exit "$?"

# Copy over the example setup.
progress-msg 'Copying example setup...'
(
    rm -rf "${outDir}/etc/example-setup"
    mkdir -p "${outDir}/etc"
    cp -r "${etcDir}/example-setup" "${outDir}/etc"
) \
|| exit "$?"

# Copy the top-level code.
progress-msg 'Copying top-level code...'
(
    mkdir -p "${outCodeDir}"
    cd "${srcDir}"
    find . -name pkg -prune -o -type f -name '*.js' -exec \
        cp '{}' "${outCodeDir}/{}" ';'
) \
|| exit "$?"

# Create package tarballs of each local package, and also gather up all the info
# for putting in the top-level `dependencies`.

localPackageSet="$(local-packages)" \
|| exit "$?"

pack-local-packages "${localPackageSet}" \
|| exit "$?"

localPackageSet="$(local-packages-fill-in-hashes "${localPackageSet}")" \
|| exit "$?"

rename-local-packages "${localPackageSet}" \
|| exit "$?"

# Save the local package info for ease of human reference.
cat <<<"${localPackageSet}" >"${outCodeDir}/local-pkg.json"

# Prep for and then run `npm install`.

# Derive the `dependencies` to use in the top-level `package.json` to represent
# the local packages.
localDepsObj="$(jget "${localPackageSet}" \
    'with_entries(.key = .value.scopedName | .value = .value.destPkgUri)'
)"

# Copy over main `package.json`, adding the local package dependencies.
jget >"${outCodeDir}/package.json" \
    --file="${srcDir}/package.json" \
    deps:json="${localDepsObj}" \
    '.dependencies += $deps'

# Let `npm` do its thing.

progress-msg 'Fetching and installing dependencies...'

npmOpts=(--no-fund)
if (( !doDev )); then
    npmOpts+=(--omit=dev)
fi

cd "${outCodeDir}"
npm install "${npmOpts[@]}" \
|| exit "$?"

# Check for files installed by `npm` that seem "suspect" for a cross-platform
# build.
cd "${outCodeDir}/node_modules"
suspectFiles="$(
    find . -type f \
        '!' '(' \
            -name '*.js' -o -name '*.json' -o -name '*.html' -o -name '*.md' \
        ')' \
        -exec file '{}' ';' \
    | grep -Ev 'ASCII|JSON|UTF-8|empty' \
    | awk '{ sub(/^\.\//, "  "); sub(/: .*$/, ""); print; }'
)"
if [[ ${suspectFiles} != '' ]]; then
    error-msg 'Files possibly containing platform-specific binaries:'
    error-msg -- "${suspectFiles}"
    exit 1
fi

# Denoument.

# Clean things up a bit.
tidy-up "${localPackageSet}" \
|| exit "$?"

progress-msg
progress-msg 'Build complete!'
