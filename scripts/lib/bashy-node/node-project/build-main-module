#!/bin/bash
#
# Copyright 2022-2024 the Bashy-lib Authors (Dan Bornstein et alia).
# SPDX-License-Identifier: Apache-2.0

. "$(dirname "$(readlink -f "$0")")/_init.sh" || exit "$?"


#
# Argument parsing
#

define-usage --with-help $'
    ${name} [<opt> ...] <project-name>

    Builds a Node main module, pulling in all its local dependencies. The
    result is deposited in a directory named <project-name> under the output
    directory. The module used to build this is named `@this/main-<project-name>`
    which is expected to be present in the modules directory.

    This tool is opinionated: The modules directories are taken to define
    submodules (in the Node sense) under the top-level name `@this`.

    **Note:** Exactly one of the two `--modules-*` options must be specified.

    --allow-platform-specific-files
      If specified, the build does *not* check to see if any platform-specific
      files ended up in the built output.
    --modules-dirs=<dir>
    --modules-dirs[]=<dir> ...
      Paths to one or more module source directories, collectively containing
      all module sources to be used. If there are same-named modules under more
      than one of the given paths, the first-listed path\'s one "wins."
    --out=<dir>
      Directory where built output goes. Defaults to `out` directly under the
      main product directory.
    --runner-script=<name>
      Create a script to run the system in the `out` directory, with the given
      name.
    --runner-versions[]=<version> ...
      What major versions of Node are allowed to run the project. Optional. If
      specified, a check is inserted into the runner script to enforce the
      restriction.
    --unsafely-run-npm-install-scripts
      If specified, runs any install-time scripts defined by modules. This is
      reasonably considered an unsafe practice (it is a vector for
      developer-directed malware), which is why it is disabled by default. This
      option exists to enable tactical problem-solving, with the hope that it
      will be left on only ephemerally.
'

# Allow the build to be platform-specific?
opt-toggle --var=platformSpecific allow-platform-specific-files

# Paths to all module directories.
opt-multi --required --var=modulesDirs --filter='/./' modules-dirs

# Built output directory.
opt-value --var=outDir out

# Name of runner script to add to the output, if any.
opt-value --var=runnerScript runner-script

# Major versions of Node which are allowed to run the project.
opt-multi --var=runnerVersions --filter='/^[0-9]+$/' runner-versions

# Run npm install-time scripts?
opt-toggle --var=runNpmInstallScripts unsafely-run-npm-install-scripts

# Project name.
positional-arg --filter='/^[-a-z0-9]+$/' --var=projectName project-name

process-args "$@" || exit "$?"


#
# Helper functions
#

# The main actions of this script.
function build-project {
    local projectName="$1"
    local destDir="$2"
    shift 2
    local modulesDirs=("$@")

    local destLibDir="${destDir}/lib"
    local mainModule="main-${projectName}"
    local localCodeDirName='code'
    local destLocalCode="${destLibDir}/${localCodeDirName}"
    local destLocalModules="${destLocalCode}/node_modules"

    progress-msg "Main module: ${mainModule}"

    mkdir -p "${destLocalModules}" \
    || return "$?"

    # Figure out local vs. external dependencies.

    progress-msg 'Determining local and external dependencies...'

    local deps
    deps="$(
        lib . find-module-dependencies \
            --modules-dirs[]="$(vals "${modulesDirs[@]}")" \
            "${mainModule}"
    )" \
    || return "$?"

    # Construct a top-level package.json.

    progress-msg 'Making `package.json` and `product-info.json`...'

    local srcMainModule
    srcMainModule="$(jget --output=raw "${deps}" '.localDirs[.main]')" \
    || return 1
    local srcPackageJson="${srcMainModule}/package.json"
    local srcPackageLockJson="${srcMainModule}/package-lock.json"
    local destLibPackageJson="${destLibDir}/package.json"
    local destLibPackageNewJson="${destLibDir}/package-new.json"

    jget >"${destLibPackageNewJson}" \
        --file="${srcPackageJson}" \
        localCodeDirName="${localCodeDirName}" \
        deps:json="${deps}" \
        projectName="${projectName}" '
    . | del(.imports) +
    {
        name:         ("top-of-" + $projectName),
        dependencies: $deps.extDeps,
        exports:      ("./" + $localCodeDirName + "/index.js")
    }' \
    || return "$?"

    jval >"${destDir}/product-info.json" \
        commitInfo="$(commit-info)" \
        projectName="${projectName}" \
        srcPackage:json:file="${srcPackageJson}" '
    {
        name: $projectName,
        version: $srcPackage.version,
        commit: $commitInfo
    }' \
    || return "$?"

    if [[ -f "${srcPackageLockJson}" ]]; then
        progress-msg 'Copying `package-lock.json`...'
        cp "${srcPackageLockJson}" "${destLibDir}/package-lock.json"
    fi

    true \
    && make-index-js "${destLocalCode}" \
    && copy-scripts "${srcMainModule}" "${destDir}" \
    && copy-local-modules "${destLocalModules}" "${deps}" \
    && remove-dead-local-modules "${destLocalModules}" "${deps}" \
    || return "$?"

    # Do `npm install`, but only if it hasn't yet been done _or_ the top-level
    # `package.json` file has changed since the last time it was run.
    if [[ ! -d "${destLibDir}/node_modules" ]] \
            || ! cmp --silent "${destLibPackageNewJson}" "${destLibPackageJson}"; then
        mv "${destLibPackageNewJson}" "${destLibPackageJson}"
        npm-install "${destLibDir}" || {
            error="$?"
            rm -rf "${destLibDir}/node_modules"
            return "${error}"
        }
    fi

    cp "${destLibDir}/package-lock.json" "${srcPackageLockJson}"

    run-postinstall-scripts "${destLocalModules}" "$(jget "${deps}" '.postinstallScripts')" \
    || return "$?"
}

# Figures out the pithy commit info to associate with the build.
function commit-info {
    cd "$(base-dir)"

    if [[ ! -d ".git" ]]; then
        echo '<unknown>'
        return
    fi

    local infoWords
    infoWords=("$(git rev-parse --short=8 HEAD)") \
    || return "$?"

    # If this repo's HEAD is pegged to a tag, this will print it.
    infoWords+=($(git tag --points-at HEAD)) \
    || return "$?"

    # If this repo's HEAD is on a branch, this will print it.
    local headRef
    headRef="$(git rev-parse --abbrev-ref HEAD)" \
    || return "$?"
    if [[ !(${headRef} =~ ^(main|HEAD)$) ]]; then
        infoWords+=("${headRef}")
    fi

    echo "${infoWords[*]}"
}

# Copies all the local modules for a project.
function copy-local-modules {
    local moduleDestDir="$1"
    local deps="$2"

    progress-msg 'Copying local modules...'

    # The `jget` command outputs an `eval`able script to perform the copies,
    # which is immediately `eval`ed.

    local copyCmd
    copyCmd="$(
        jget --output=raw "${deps}" \
            cmd='lib rsync-local --delete' \
            toDir="${moduleDestDir}" '
          .localDirs
        | to_entries
        | map({ name: .key, fromPath: .value })
        | map({
            fromPath: ("\(.fromPath)/" | @sh),
            toPath:   ("\($toDir)/\(.name)" | @sh)
        })
        | map(
            "mkdir -p \(.toPath)",
            "\($cmd) \(.fromPath) \(.toPath)"
        )
        | map("&& \(.) \\")
        | ["true \\", .[], "&& true"]
        | join("\n")
        '
    )" \
    || return "$?"

    eval "${copyCmd}"
}

# Copies the main module's script(s), if any.
function copy-scripts {
    local srcDir="$1/bin"
    local destDir="$2/bin"

    if [[ ! -d "${srcDir}" ]]; then
        return
    fi

    # Get a JSON array of all the files.
    local fileList
    fileList="$(lib ls-files --output=array --cd="${srcDir}" --depth=1)" \
    || return "$?"

    if [[ ${fileList} == '[]' ]]; then
        return
    fi

    progress-msg 'Copying scripts...'

    mkdir -p "${destDir}" \
    || return "$?"

    local file
    while IFS='' read -r -d $'\0' file; do
        local srcScript="${srcDir}/${file}"
        local destScript="${destDir}/${file}"
        if [[ -x "${srcScript}" ]]; then
            error-msg 'Script is marked executable in the source directory:'
            error-msg "  ${srcScript}"
            error-msg 'It cannot actually be run from there. Do this:'
            error-msg
            error-msg --exec printf '  chmod -x %q\n' "${srcScript}"
            error-msg
            return 1
        fi
        progress-msg "  ${file}"
        rm -rf "${destScript}"            || return "$?"
        cp "${srcScript}" "${destScript}" || return "$?"
        chmod +x "${destScript}"          || return "$?"
    done < <(jget --output=raw0 "${fileList}" '.[]')
}

# Creates the runner script.
function create-runner-script {
    local outFile="$1"
    shift
    local versions=("$@")

    local outDir="${outFile%/*}"

    mkdir -p "${outDir}" \
    || return "$?"

    (
        # Available to the template code.
        RUNNER_NODE_VERSIONS=("${versions[@]}")

        # Because we `eval`, prefix these names to try to avoid conflict.
        _bmm_collecting=0 # Are we collecting an embedded script?
        _bmm_toEval=()    # Lines to evaluate.
        _bmm_line=''      # Current line.
        _bmm_error=0      # Got an error during eval?

        while IFS='' read -r _bmm_line || [[ ${_bmm_line} != '' ]]; do
            if (( _bmm_collecting )); then
                if [[ ${_bmm_line} == '#}#' ]]; then
                    _bmm_collecting=0
                    eval "$(printf '%s\n' "${_bmm_toEval[@]}")" \
                    || _bmm_error=1
                else
                    _bmm_toEval+=("${_bmm_line}")
                fi
            elif [[ ${_bmm_line} == '#{#' ]]; then
                _bmm_collecting=1
                _bmm_toEval=()
            else
                printf '%s\n' "${_bmm_line}"
            fi
        done <"$(this-cmd-dir)/runner-script.txt"

        if (( _bmm_error )); then
            exit 1
        fi
    ) >"${outFile}" 2>&1

    if (( $? != 0 )); then
        error-msg 'Error during runner script generation!'
        return 1
    fi

    chmod 755 "${outFile}" \
    || return "$?"
}

# Writes a top-level `index.js` for a project.
function make-index-js {
    local dir="$1"

    progress-msg 'Making `index.js`...'

    (
        echo "// THIS FILE WAS GENERATED BY SCRIPT \`$(this-cmd-name)\`."
        echo ''
        echo "import { default as main } from '@this/${mainModule}';"
        echo ''
        echo 'await main();'
        echo ''
        echo '// `main()` is not ever supposed to return.'
        echo $'throw new Error(\'Shouldn\\\'t happen.\');'
        echo ''
        echo "// THIS FILE WAS GENERATED BY SCRIPT \`$(this-cmd-name)\`."
    ) > "${dir}/index.js"
}

# Does an `npm install` in the given directory.
function npm-install {
    local dir="$1"

    progress-msg 'Fetching and installing external dependencies...'
    progress-msg

    local extraOpts=()
    if (( !runNpmInstallScripts )); then
        # `--ignore-scripts` is a tactic to avoid developer-targeted malware.
        # (See the note in the usage message above.) As of this writing, none of
        # the dependencies of any project using this system actually need to run
        # install scripts, so there's nothing additional to do in order to cope
        # with the flag (e.g., no need to run scripts in an "offline chroot" or
        # somesuch).
        extraOpts=(--ignore-scripts)
    fi

    (
        cd "${dir}"
        npm install --no-fund --omit=dev "${extraOpts[@]}"
    ) \
    || return "$?"
}

# Removes any local modules that are "dead" with respect to the current build.
# These are modules that (presumably) used to be part of the build but got
# dropped for whatever reason.
function remove-dead-local-modules {
    local dir="$1"
    local deps="$2"

    local deadModules
    deadModules="$(
        lib ls-files --output=array --cd="${dir}" --depth=2 --dirs \
            '::' deps:json="${deps}" '. - $deps.localDeps'
    )"

    local mod first=1
    while IFS='' read -r -d $'\0' mod; do
        if (( first )); then
            progress-msg 'Removing defunct local modules:'
            first=0
        fi

        progress-msg "  ${mod}"
        rm -rf "${dir}/${mod}" || return "$?"
    done < <(jget --output=raw0 "${deadModules}" '.[]')

    if (( !first )); then
        progress-msg
    fi
}

# Runs any `postinstall` scripts defined by local modules.
function run-postinstall-scripts {
    local destLocalModules="$1"
    local scriptModules="$2"

    if [[ ${scriptModules} == '[]' ]]; then
        return
    fi

    progress-msg 'Running local-module postinstall scripts...'

    local modArray=()
    jset-array --raw modArray "${scriptModules}"

    # `(...)` to preserve the `cwd` in this process.
    (
        cd "${destLocalModules}"
        local m
        for m in "${modArray[@]}"; do
            progress-msg "Postinstall ${m}..."
            npm explore "${m}" -- npm run postinstall \
            || return "$?"
        done
    )

    progress-msg 'Done running local-module postinstall scripts.'
}

# Checks a `node_modules` directory (or similar) for "suspect" files, given a
# desire to have a platform-agnostic build.
function suspect-file-check {
    local dir="$1"

    if [[ ! -d ${dir} ]]; then
        error-msg 'Missing directory for suspect file check:'
        error-msg "  ${dir}"
        return 1
    fi

    suspectFiles="$(
        lib ls-files --output=array --cd="${dir}" \
            --exclude='\.(cjs|js|json|html|md|mjs|pyc|ts|txt|yml)$'
    )" \
    || return "$?"

    local file first=1
    while IFS='' read -r -d $'\0' file; do
        local info="$(file -- "${dir}/${file}")"

        if [[ ${info} =~ ASCII|JSON|PNG|UTF-8|empty|'short file' ]]; then
            continue
        fi

        if (( first )); then
            error-msg 'Files possibly containing platform-specific binaries:'
            first=0
        fi

        error-msg "  ${file}"
    done < <(jget --output=raw0 "${suspectFiles}" '.[]')

    if (( !first )); then
        return 1
    fi
}


#
# Main script
#

progress-msg "Building Node project \`${projectName}\`..."

outDir="$(lib buildy out-dir --out="${outDir}" --create --print --quiet)"

outProjectDir="${outDir}/${projectName}"

if [[ ! -d ${outProjectDir} ]]; then
    progress-msg 'Creating project-specific output directory...'
    mkdir -p "${outProjectDir}" \
    || exit "$?"
fi

build-project "${projectName}" "${outProjectDir}" "${modulesDirs[@]}" \
|| exit "$?"

if (( !platformSpecific )); then
    progress-msg 'Checking for platform agnosticity...'
    suspect-file-check "${outProjectDir}/lib/node_modules" \
    || exit "$?"
fi

if [[ ${runnerScript} != '' ]]; then
    progress-msg 'Creating runner script...'
    create-runner-script "${outProjectDir}/bin/${runnerScript}" \
        "${runnerVersions[@]}" \
    || exit "$?"
fi

progress-msg
progress-msg "Built Node project \`${projectName}\`."
