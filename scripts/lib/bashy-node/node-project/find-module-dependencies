#!/bin/bash
#
# Copyright 2022-2024 the Bashy-lib Authors (Dan Bornstein et alia).
# SPDX-License-Identifier: Apache-2.0

. "$(dirname "$(readlink -f "$0")")/_init.sh" || exit "$?"


#
# Argument parsing
#

define-usage --with-help $'
    ${name} [<opt> ...] [--] <module-name>

    Transitively finds all module dependencies from the given <module-name>,
    which must be the name of a module defined under one of the indicated
    modules directories. Prints out a JSON object with bindings as follows:

    * `main: string` -- The originally requested module.
    * `localDeps: [name, ...]` -- Local module dependencies.
    * `localDirs: { name: path, ... }` -- Mapping from each local module name to
      the source directory it lives in.
    * `extDeps: { name: version, ... }` -- External (e.g. npm) module
      dependencies.

    If a dependency cycle is detected, this prints a diagnostic message and
    exits with an error.

    This tool is opinionated: The modules directories are taken to define
    submodules (in the Node sense) under the top-level name `@this`.

    --modules-dirs=<dir>
    --modules-dirs[]=<dir> ...
      Paths to one or more module source directories, collectively containing
      all module sources to be used. If there are same-named modules under more
      than one of the given paths, the first-listed path\'s one "wins."
'

# Paths to all module directories.
opt-multi --required --var=modulesDirs --filter='/./' modules-dirs

# The module to start at.
positional-arg --required --var=moduleName module-name

process-args "$@" || exit "$?"


#
# Main script
#

# Call out to our Node companion, to do all the work.

exec node "$(this-cmd-dir)/find-module-dependencies.mjs" \
    "$(jval \
        mainModule="${moduleName}" \
        modulesDirs:json="$(jarray --input=strings "${modulesDirs[@]}")" \
        '{
            mainModule:  $mainModule,
            modulesDirs: $modulesDirs
        }')"
