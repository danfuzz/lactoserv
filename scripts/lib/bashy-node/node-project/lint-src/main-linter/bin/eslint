#!/bin/bash
#
# Copyright 2022-2024 the Bashy-lib Authors (Dan Bornstein et alia).
# SPDX-License-Identifier: Apache-2.0

# Figure out the symlink-resolved program name and directory.
cmdName="$(readlink -f "$0")" || exit "$?"
cmdDir="${cmdName%/*}"
cmdName="${cmdName##*/}"
baseDir="${cmdDir%/*}"

# Grab arguments, for later tweakage.
args=("$@")

# The absolute path to the config file (set in `fix-config-arg`).
configFile=''


#
# Helper functions
#

# Copies a config file to a directory, giving it a unique name, and prints out
# the full path.
function copy-config-file {
    local srcPath="$1"
    local destDir="$2"

    local baseName="$(basename "${srcPath}")"
    local prefix="$(date +%s)"
    (( prefix = (prefix + $$) % 10000 ))

    local destPath
    while true; do
        destPath="${destDir}/${prefix}-${baseName}"
        if [[ ! -x "${destPath}" ]]; then
            break
        fi
        (( prefix++ ))
    done

    cp "${srcPath}" "${destPath}" \
    || return "$?"

    echo "${destPath}"
}

# Finds the argument which specifies the config file, stashes it in a global
# as an absolute path, and drops it from the arguments.
function find-config-arg {
    local n path

    for (( n = 0; n < "${#args[@]}"; n++ )); do
        arg="${args[n]}"
        if [[ ${arg} =~ --config=(.+)$ ]]; then
            configFile="${BASH_REMATCH[1]}"
            configFile="$(resolve-config-file "${configFile}")" || return "$?"
            unset args[n]
            break
        elif [[ ${arg} == --config ]]; then
            configFile="${args[n+1]}"
            configFile="$(resolve-config-file "${configFile}")" || return "$?"
            unset args[n]
            unset args[n+1]
            break
        elif [[ -r ${arg} ]]; then
            # It's a readable file. Make it absolute.
            path="$(readlink -f "${arg}")" \
            && arg[n]="${path}"
        fi
    done
}

# Resolves a config file to an absolute path.
function resolve-config-file {
    local path="$1"

    if [[ ! -r ${path} ]]; then
        echo 1>&2 "Configuration file not readable: ${path}"
        exit 1
    fi

    readlink -f "${path}"
}


#
# Main script
#

find-config-arg \
|| exit "$?"

# Call through to the `eslint` that got built by the main ESLint dependency.

if [[ ${configFile} =~ (^|/)eslint[.]config[.] ]]; then
    # It's a modern "flat" config file.
    srcDir="$(dirname "${configFile}")"
    cd "${srcDir}"

    newConfigFile="$(copy-config-file "${configFile}" "${baseDir}/lib")" \
    || exit "$?"
    trap "rm -rf \"${newConfigFile}\"" EXIT

    ESLINT_USE_FLAT_CONFIG=true \
    "${baseDir}/lib/node_modules/.bin/eslint" \
        --cache --cache-location "${baseDir}/cache" \
        --config "${newConfigFile}" \
        "${args[@]}"
else
    # It's an old-style (pre-ESLint 8) config file.
    exec "${baseDir}/lib/node_modules/.bin/eslint" \
        --resolve-plugins-relative-to "${baseDir}/lib" \
        --cache --cache-location "${baseDir}/cache" \
        --config "${configFile}" \
        "${args[@]}"
fi
