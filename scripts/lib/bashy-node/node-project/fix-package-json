#!/bin/bash
#
# Copyright 2022-2023 the Bashy-lib Authors (Dan Bornstein et alia).
# SPDX-License-Identifier: Apache-2.0

. "$(dirname "$(readlink -f "$0")")/_init.sh" || exit "$?"


#
# Argument parsing
#

define-usage $'
    ${name} [<opt> ...] [<file> ...]

    Fixes `package.json` files in various ways. With <file>s, processes only
    the indicated files; otherwise processes the entire source tree.

    ${help}
'

# Want help?
opt-action --call='{ usage; exit }' help/h

# Specific paths to process
rest-arg --var=files --filter=/./ file

process-args "$@" || usage --short


#
# Helper functions
#

# The actual import-wrangling AWK script.
WRANGLER_AWK=$'
/ from ["\']/ {
    from = $0;
    sub(/^.* from [\'"]/, "", from);
    sub(/[\'"].*/, "", from);
    $0 = from;
    if (from ~ /^@this\//) {
        deps[from] = 1;
    }
}

END {
    count = 0;
    for (dep in deps) {
        count++;
        result[count] = dep;
    }

    sort(result);
    for (i = 1; i <= count; i++) {
        print result[i];
    }
}

# Good ole selection sort.
function sort(array, withLocals, i, j, size, tmp) {
    size = length(array);
    for (i = 1; i < size; i++) {
        for (j = i + 1; j <= size; j++) {
            if (array[i] > array[j]) {
                tmp = array[i];
                array[i] = array[j];
                array[j] = tmp;
            }
        }
    }
}
'

# Determines the proper intra-project dependencies under the given directory.
function get-deps {
    local srcDir="$1"
    local files

    files=($(
        lib buildy ls-files --output=lines --include='\.js$' "${srcDir}"
    )) \
    || return "$?"

    if (( ${#files[@]} != 0 )); then
        awk "${WRANGLER_AWK}" "${files[@]}" \
        || return "$?"
    fi
}

# Runs the fixer on the given file.
function do-fix {
    local filePath="$1"

    local oldDeps
    oldDeps="$(jval <"${filePath}" --input=read '.dependencies // {}')" \
    || return "$?"

    local foundDeps
    foundDeps="$(
        jarray --input=strings $(get-deps "$(dirname "${filePath}")")
    )" \
    || return "$?"

    local finalDeps
    finalDeps="$(jval \
        oldDeps:json="${oldDeps}" \
        foundDeps:json="${foundDeps}" '
    ($foundDeps | map({ key: ., value: "*" }) | from_entries)
    + ($oldDeps | with_entries(select(.key | startswith("@this") | not)))
    | to_entries | sort_by(.key) | from_entries
    ')" \
    || return "$?"

    local pkg
    pkg="$(jval <"${filePath}" --input=read \
        deps:json="${finalDeps}" '
    {
        name: .name,
        version: .version,
        type: "module",
        private: true,
        license: (.license // "UNLICENSED"),
        BLANK_LINE_1: "",
        exports: "./index.js",
        imports: {
          "#x/*": "./export/*.js",
          "#p/*": "./private/*.js"
        }
    }
    |
    if $deps == {}
    then .
    else . + {
        BLANK_LINE_2: "",
        dependencies: $deps
    }
    end
    ')" \
    || return "$?"

    awk <<<"${pkg}" > "${filePath}" '
        /BLANK_LINE/ { print ""; next }
        { print; }
    '
}


#
# Main script
#


srcDir="$(base-dir)/src"

if (( ${#files[@]} == 0 )); then
    files=($(lib buildy ls-files --output=lines --include='/package\.json$')) \
    || exit "$?"
else
    error=0
    for file in "${files[@]}"; do
        if [[ ! (-f "${file}" && -r "${file}") ]]; then
            error-msg "Not readable: ${file}"
            error=1
        fi
    done
    if (( error )); then
        exit 1
    fi
fi

for file in "${files[@]}"; do
    info-msg "Processing ${file}..."
    do-fix "${file}" || exit "$?"
done

info-msg ''
info-msg 'Done!'
