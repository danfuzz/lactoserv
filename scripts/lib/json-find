#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License, Version 2.0.
# Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Load the helper libraries.
. "$(dirname "$(readlink -f "$0")")/init.sh" || exit "$?"

#
# Argument parsing
#

function usage {
    print-usage $'
    Usage:

    ${name} <find-arg> ...
      Just like normal POSIX `find`, with an extra "primary" `-printjson`.
      `-printjson` is like `-print` except that it outputs JSON strings instead
      of newline-delimited raw text. This notably makes it safe for use with
      file names that have spaces in them.

    ${name} [--help | -h]
      Displays this message.
    '

    exit "$@"
}

# Want help?
opt-action --call='{ usage }' help/h

# Regular `find` arguments.
rest-arg --var=findArgs find-args

process-args "$@" || usage "$?"


#
# Main script
#

jsonArray="$(lib --path json-array)" \
|| exit "$?"

args=()
for arg in "${findArgs[@]}"; do
    if [[ ${arg} == '-printjson' ]]; then
        args+=(-exec "${jsonArray}" --input=strings '{}' '+')
    else
        args+=("${arg}")
    fi
done

# The latter half of the pipe combines all the results from multiple calls to
# `json-array`, in case `find` split the `-exec` into multiple calls.
find "${args[@]}" \
| lib json-val --input=read '.[]'
