#!/bin/bash
#
# Copyright 2022-2023 the Bashy-lib Authors (Dan Bornstein et alia).
# SPDX-License-Identifier: Apache-2.0

. "$(dirname "$(readlink -f "$0")")/_init.sh" || exit "$?"


#
# Argument parsing
#

define-usage --with-help $'
    ${name} [<path> ...] [:: [<out-opt> ...] [<jval-expr> ...]]

    List files and/or directories at or under the given <path>s. With no <path>s,
    lists all items in or under the current directory.

    An optional `::` followed by additional arguments causes the initial output
    to be further processed by `jval`.

    This tool is inspired by `git ls-files`, and is similar to the git-specific
    `buildy ls-files` in this library.

    --cd=<dir>
      Change to the given directory before performing the search. This affects
      how relative <path>s are treated as well as passing no <path> arguments
      at all.
    --depth=<n>
      Only include paths at the given depth below the starting <path>s.
    --dirs
      Include directories in the output.
    --exclude=<regex>
      Regular expression indicating which files to exclude. This is treated as
      an "extended" regex. If both this and `--include` are used, then this
      option takes precedence.
    --files
      Include files in the output. This is the default if neither this option nor
      `--dirs` is specified.
    --full-paths
      Output full canonicalized (absolute) paths. By default, outputs paths that
      are prefixed with one of the <path> arguments, or in the case of no <path>
      arguments not prefixed at all (just a straight relative path from CWD).
    --include=<regex>
      Regular expression indicating which files to include. This is treated as
      an "extended" regex.
    --output=<style> :: array json lines none raw raw0
      What to output. This controls the initial output, not postprocessing if
      any (which can specify its own `--output`). See `jval` for the meaning of
      most of these; beyond that, `array` means that the output is a single
      array of all values, and `json` means a stream of values. `json` is the
      default.
    --sort
      Sort the output. By default, the order is whatever happens to be returned
      by the underlying `find` command (which depends on the OS and filesystem).

    Output options (after the `::`):

    --output=<style> :: compact json lines none raw raw0
      How to process the final output. All options are as with `jval`. The default
      is `json`.
'

# Handles JSON `--output` option.
usual-json-output-args --no-rest

# Directory to `cd` to before running.
opt-value --var=cdTo --filter='/./' cd

# Depth for results.
opt-value --var=depth --filter='/^[0-9]+$/' depth

# Exclude pattern.
opt-value --var=excludeRegex --filter='/./' exclude

# Include directories in the output?
opt-toggle --var=doDirs dirs

# Include (regular) files in the output?
opt-toggle --var=doFiles files

# Full paths?
opt-toggle --var=fullPaths full-paths

# Include pattern.
opt-value --var=includeRegex --filter='/./' include

# Sort the output?
opt-toggle --var=sortOutput sort

# The paths.
paths=()

rest-arg --call=parse-rest args
function parse-rest {
    local error=0
    local arg

    # Collect paths.
    while (( $# > 0 )); do
        arg="$1"
        if [[ ${arg} == '::' ]]; then
            break
        fi

        paths+=("${arg}")
        shift
    done

    # Pass the postprocessing arguments, if any, through to the helper library.
    if [[ "$1" == '::' ]]; then
        set-json-postproc-args "$@"
    fi
}

process-args "$@" || exit "$?"


#
# Main script
#

if (( !doDirs )); then
    doFiles=1
fi

if [[ ${cdTo} != '' ]]; then
    cd "${cdTo}" \
    || exit "$?"
fi

impliedCwd=0
if [[ ${#paths[@]} == 0 ]]; then
    paths=('.')
    impliedCwd=1
else
    # Check to see if any of the paths start with a dash. If so, prefix all
    # relative paths with `./` so that `find` (which doesn't have any other
    # standard way to deal with this) won't confuse them with options.
    for path in "${paths[@]}"; do
        if [[ ${path} =~ ^- ]]; then
            impliedCwd=1
            break
        fi
    done
    if (( impliedCwd )); then
        for n in "${!paths[@]}"; do
            if [[ ${paths[n]} =~ ^- ]]; then
                paths[n]="./${paths[n]}"
            fi
        done
    fi
fi

results=()

while IFS='' read -r -d $'\0' file; do
    if [[ ${file} == $'\x01error' ]]; then
        exit 1
    fi

    if (( impliedCwd )); then
        if [[ ${file} == '.' ]]; then
            # Drop the top-level `.` entirely.
            continue
        else
            # Drop the `./` prefix from the result if present.
            file="${file#'./'}"
        fi
    fi

    # Process exclusions and inclusions, if any.
    if [[ (${excludeRegex} != '') && (${file} =~ ${excludeRegex}) ]]; then
        continue
    elif [[ (${includeRegex} != '') && !(${file} =~ ${includeRegex}) ]]; then
        continue
    fi

    if (( fullPaths )); then
        file="$(readlink -f -- "${file}")" \
        || exit 1
    fi

    results+=("${file}")
done < <(
    findArgs=("${paths[@]}")

    if [[ ${depth} != '' ]]; then
        findArgs+=(-mindepth "${depth}" -maxdepth "${depth}")
    fi

    if (( doFiles )); then
        if (( doDirs )); then
            findArgs+=('(' -type f -o -type d ')')
        else
            findArgs+=(-type f)
        fi
    elif (( doDirs )); then
        findArgs+=(-type d)
    fi

    # Note: The `printf` contents are designed to make it possible for the loop
    # above to (nearly) unambiguously notice errors.
    if (( sortOutput )); then
        (
            find "${findArgs[@]}" -print0 || printf '\x01error\x00'
        ) | sort -z
    else
        find "${findArgs[@]}" -print0 || printf '\x01error\x00'
    fi
)

json-postproc-strings "${results[@]}"
