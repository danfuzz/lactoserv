#!/bin/bash
#
# Copyright 2022-2024 the Bashy-lib Authors (Dan Bornstein et alia).
# SPDX-License-Identifier: Apache-2.0

. "$(dirname "$(readlink -f "$0")")/_init.sh" || exit "$?"


#
# Argument parsing
#

define-usage --with-help $'
    ${name} [<opt> ...] <repo-url>

    Pulls / syncs up a given repo to be used for a build. On success, prints the
    directory where the repo resides. Repo directories are always placed
    directly under the `repos` directory under the (configurable) `out`
    directory.

    If the repo exists and there are uncommitted changes, then those changes
    get stashed.

    --clone-config=<git-config>
      Add a repo configuration, as with the `--config` option of `git clone`.
      May be used more than once to add multiple configs. This _only_ has an
      effect when the repo has not yet been cloned.
    --just-print-dir
      Instead of doing any actual clone/pull work, _just_ print the name of the
      directory where the repo is or will be.
    --out=<dir>
      Directory where built output goes. Defaults to `out` directly under the
      main product directory.
    --tag=<spec>
      Tag or branch spec. If specified, then the indicated tag (or etc.) will be
      checked out. By default, the repo\'s default branch (e.g. `main`) is
      checked out.
'

# `git clone` configs.
cloneConfigs=()
opt-value --call='{ cloneConfigs+=("$1") }' --filter='/=/' clone-config

# Just print the directory?
opt-toggle --var=justPrintDir just-print-dir

# Built output directory.
opt-value --var=outDir out

# Tag / branch to check out.
opt-value --var=tagSpec --filter='/./' tag

# Repo URL.
positional-arg --var=repoUrl repo-url

process-args "$@" || exit "$?"


#
# Helper functions
#

# Do most of the actual work of the script.
function actually-pull {
    local repoUrl="$1"
    local destDir="$2"

    if [[ ! -d ${destDir} ]]; then
        # Fresh build: Clone the repo for the first time.
        progress-msg '  Cloning...'

        mkdir -p "${destDir%/*}" \
        || return "$?"

        args=()
        for c in "${cloneConfigs[@]}"; do
            args+=(-c "${c}")
        done

        git 1>&2 clone --quiet "${args[@]}" "${repoUrl}" "${destDir}" \
        || return "$?"
    else
        # Rebuild: Update the repo from upstream.
        progress-msg '  Updating...'

        mainBranch="$(main-branch-name "${destDir}")" \
        || return "$?"

        (
            cd "${destDir}"

            if any-changes; then
                progress-msg '  Stashing uncommitted changes...'
                git 1>&2 stash --quiet || return "$?"
                progress-msg '  Now updating for realsies...'
            fi

            true \
            && git checkout --quiet "${mainBranch}" \
            && git 1>&2 pull --quiet \
            && git 1>&2 pull --quiet --tags --force
        ) \
        || return "$?"
    fi

    if [[ ${tagSpec} != '' ]]; then
        progress-msg "  Tag: ${tagSpec}"
        (
            cd "${destDir}"

            git checkout --quiet "${tagSpec}" \
            || exit "$?"

            # Differentiate branch (`pull`able) from tag (not `pull`able), and
            # only pull in the former case.
            if [[ "$(git branch --show-current)" != '' ]]; then
                git 1>&2 pull --quiet
            fi
        ) \
        || return "$?"
    fi
}

# Checks to see if there are any changes in the repo containing the CWD.
function any-changes {
    git update-index

    git diff-index --quiet HEAD -- \
    && return 1 \
    || return 0
}

# Determines the main branch name of the repo in the given directory.
function main-branch-name {
    local dir="$1"

    (
        cd "${dir}"

        mainBranch="$(git branch --remotes --list '*/HEAD')" || {
            error-msg 'Could not determine main branch.'
            exit 1
        }

        mainBranch="$(head <<<"${mainBranch}" -1)"
        echo "${mainBranch##*/}"
    )
}


#
# Main script
#

outDir="$(lib . out-dir --out="${outDir}")" \
|| exit "$?"

if [[ !(${repoUrl} =~ /([^./]+)([.]git)?$) ]]; then
    error-msg "Could not parse repo URL: ${repoUrl}"
    exit 1
fi

repoName="${BASH_REMATCH[1]}"
reposDir="${outDir}/repos"
destDir="${reposDir}/${repoName}"

if (( !justPrintDir )); then
    progress-msg "Pulling repo: ${repoName}"
    actually-pull "${repoUrl}" "${destDir}" \
    || exit "$?"
    progress-msg '  Done!'
fi

echo "${destDir}"
