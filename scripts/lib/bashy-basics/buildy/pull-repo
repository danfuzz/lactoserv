#!/bin/bash
#
# Copyright 2022-2023 the Bashy-lib Authors (Dan Bornstein et alia).
# SPDX-License-Identifier: Apache-2.0

. "$(dirname "$(readlink -f "$0")")/_init.sh" || exit "$?"


#
# Configuration
#

# Tag (or branch) to use for updating the `lactoserv` repo.
lactoservTag='v0.5.13'


#
# Argument parsing
#

define-usage $'
    ${name} [<opt> ...] <repo-url>

    Pulls / syncs up a given repo to be used for a build. On success, prints the
    directory where the repo resides. Repo directories are always placed
    directly under the `repos` directory under the (configurable) `out`
    directory.

    --out=<dir>
      Directory where built output goes. Defaults to `out` directly under the
      main product directory.
    --tag=<spec>
      Tag or branch spec. If specified, then the indicated tag (or etc.) will be
      checked out. By default, the repo\'s default branch (e.g. `main`) is
      checked out.

    ${help}
'

# Want help?
opt-action --call='{ usage; exit }' help/h

# Built output directory.
opt-value --var=outDir out

# Tag / branch to check out.
opt-value --var=tagSpec --filter='/./' tag

# Repo URL.
positional-arg --var=repoUrl repo-url

process-args "$@" || usage --short


#
# Helper functions
#

# Determines the main branch name of the repo in the given directory.
function main-branch-name {
    local dir="$1"

    (
        cd "${dir}"

        mainBranch="$(git branch --remotes --list '*/HEAD')" || {
            error-msg 'Could not determine main branch.'
            exit 1
        }

        mainBranch="$(head <<<"${mainBranch}" -1)"
        echo "${mainBranch##*/}"
    )
}


#
# Main script
#

outDir="$(lib . out-dir)" \
|| exit "$?"

if [[ !(${repoUrl} =~ /([^./]+)([.]git)?$) ]]; then
    error-msg "Could not parse repo URL: ${repoUrl}"
    return 1
fi

repoName="${BASH_REMATCH[1]}"
reposDir="${outDir}/repos"
destDir="${reposDir}/${repoName}"

mkdir -p "${reposDir}" \
|| exit "$?"

progress-msg "Pulling repo: ${repoName}"

if [[ ! -d ${destDir} ]]; then
    # Fresh build: Clone the repo for the first time.
    progress-msg '  Cloning...'

    git 1>&2 clone --quiet "${repoUrl}" "${destDir}" \
    || exit "$?"
else
    # Rebuild: Update the repo from upstream.
    progress-msg '  Updating...'

    mainBranch="$(main-branch-name "${destDir}")" \
    || exit "$?"

    (
        cd "${destDir}"
        true \
        && git checkout --quiet "${mainBranch}" \
        && git 1>&2 pull --quiet "${idArgs[@]}" \
        && git 1>&2 pull --quiet --tags --force
    ) \
    || exit "$?"
fi

if [[ ${tagSpec} != '' ]]; then
    progress-msg "  Tag: ${tagSpec}"
    (
        cd "${destDir}"
        git checkout --quiet "${tagSpec}"
    ) \
    || exit "$?"
fi

progress-msg '  Done!'
echo "${destDir}"
