#!/bin/bash
#
# Copyright 2022-2023 the Bashy-lib Authors (Dan Bornstein et alia).
# SPDX-License-Identifier: Apache-2.0

. "$(dirname "$(readlink -f "$0")")/_init.sh" || exit "$?"


#
# Argument parsing
#

define-usage --with-help $'
    ${name} [<path> ...] [:: [<out-opt> ...] [<jval-expr> ...]]

    List files in the project at or under the given <path>s, respecting
    `.gitignore` (etc.). With no <path>s, lists all project files.

    An optional `::` followed by additional arguments causes the initial output
    to be further processed by `jval`.

    This tool is inspired by (and based on) `git ls-files`, and is similar to
    the non-git-specific `ls-files` in this library.

    --full-paths
      Output full canonicalized (absolute) paths. By default, outputs paths that
      are relative to the project\'s base directory.
    --include=<regex>
      Regular expression indicating which files to include. This is treated as
      an unanchored "extended" regex. Matching is performed on relative paths
      from the project\'s base directory; that is, the absolute path to the
      project is not part of the text being matched.
    --output=<style> :: array json lines none raw raw0
      What to output. This controls the initial output, not postprocessing if
      any (which can specify its own `--output`). See `jval` for the meaning of
      most of these; beyond that, `array` means that the output is a single
      array of all values, and `json` means a stream of values. `json` is the
      default.

    Output options (after the `::`):

    --output=<style> :: compact json lines none raw raw0
      How to process the final output. All options are as with `jval`. The default
      is `json`.
'

# Handles JSON `--output` option.
usual-json-output-args --no-rest

# Full paths?
opt-toggle --var=fullPaths full-paths

# Include pattern.
opt-value --var=includeRegex --init='.' --filter='/./' include

# The paths.
paths=()

rest-arg --call=parse-rest args
function parse-rest {
    local error=0
    local arg

    # Collect paths.
    while (( $# > 0 )); do
        arg="$1"
        if [[ ${arg} == '::' ]]; then
            break
        fi

        paths+=("${arg}")
        shift
    done

    # Pass the postprocessing arguments, if any, through to the helper library.
    if [[ "$1" == '::' ]]; then
        set-json-postproc-args "$@"
    fi
}

process-args "$@" || exit "$?"


#
# Main script
#

baseDir="$(base-dir)" || exit "$?"

# Canonicalize the paths.
error=0
for i in "${!paths[@]}"; do
    p="${paths[i]}"
    newPath="$(readlink -f -- "${p}")" || {
        error-msg "No such path: ${p}"
        error=1
        continue
    }

    if [[ ! ((${newPath} =~ ^"${baseDir}/") || (${newPath} == ${baseDir})) ]]; then
        error-msg "Not a project path: ${p}"
        error=1
    fi
    paths[i]="${newPath}"
done

if (( error )); then
    exit 1
fi

cd "${baseDir}"

results=()

while IFS='' read -r -d $'\0' file; do
    if [[ ${file} == $'\x01error' ]]; then
        exit 1
    fi
    if [[ ${file} =~ ${includeRegex} ]]; then
        if (( fullPaths )); then
            file="${baseDir}/${file}"
        fi
        results+=("${file}")
    fi
done < <(
    # Note: The `printf` contents are designed to make it possible for the loop
    # above to (nearly) unambiguously notice errors.
    git ls-files -z --cached --others --exclude-standard -- "${paths[@]}" \
    || printf '\x01error\x00'
)

case "${outputStyle}" in
    json)
        jarray --input=strings "${results[@]}"
        ;;
    lines)
        printf '%s\n' "${results[@]}"
        ;;
    raw0)
        printf '%s\x00' "${results[@]}"
        ;;
esac

json-postproc-strings "${results[@]}"
