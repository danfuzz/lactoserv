#!/bin/bash
#
# Copyright 2022-2023 the Bashy-lib Authors (Dan Bornstein et alia).
# SPDX-License-Identifier: Apache-2.0

. "$(dirname "$(readlink -f "$0")")/_init.sh" || exit "$?"


#
# Argument parsing
#

# Yes, this constructs a recursive call to this script.
define-usage --with-help $'
    ${name} [<opt> ...] [--] <message>

    Prints a usage message. This does the following to the given <message>:

    * Trim away empty lines at the start and end of the string.
    * Trim away whitespace from the start of lines, based on the indentation of
      the first not-just-whitespace line.
    * Substitute variables (see below) in the form `$${name}`.
    * Substitute `$$$$` with a literal `$$`.)
    * Print everything to `stderr`.

    Available variables:
    `$${help}` -- The standard blurb about the usual help option `--help` / `-h`
    `$${name}` -- The name of the command, as passed via `--name`.
    `$${stderr}` -- The standard blurb about the usual stderr control options
      `--verbose` and `--quiet` / `-q`.

    --name=<name>
      The name of the command to use for `$${name}.` This is required.
    --short
      Prints a short version of the <message>, intended to be the coda on some
      other error message. This only prints double-newline delimited sections
      whose first line starts with the value of `$${name}`. In addition, it
      prepends an extra newline at the start. Note: For this to work as intended,
      always put a double-newline after each command summary section.
'

# Command name.
opt-value --required --var=cmdName --filter='/^[_a-zA-Z]/' name

# Extract short usage?
opt-toggle --var=short short

# Usage message to print.
positional-arg --required --var=message message

process-args "$@" || usage --short


#
# Main script
#

# Ensure newline at the end of `${message}`.
if ! [[ ${message} =~ $'\n'$ ]]; then
    message+=$'\n'
fi

vars="
name
${cmdName}
;

help
    \${name} [--help | -h]

    Displays this message.
;

stderr
    --verbose=<level> --quiet -q :: \`none\` \`error\` \`warn\` \`all\`
      How much to print to stderr. \`--quiet\` / \`-q\` is equivalent to
      \`--verbose=none\`.
;

message
${message}
;
"

info-msg --exec awk -v short="${short}" <<<"${vars}" '
BEGIN {
    wantName = 1;
    inBody = 0;
}

/^[ \t]*$/ && !inBody {
    next;
}

wantName {
    name = $0;
    gsub(/[ \t]/, "", name);
    wantName = 0;
    inBody = 1;
    body = "";
    next;
}

inBody && /^;/ {
    sub(/\n+$/, "", body); # Drop final `\n`s.
    vars[name] = body;
    wantName = 1;
    inBody = 0;
    next;
}

# Ignore blank lines at the start of a body.
inBody && (body == "") && /^[ \t]*$/ {
    next;
}

# Determine first-line indent, so as to apply out-denting. Convert to a regex.
inBody && (body == "") {
    match($0, /^[ \t]*/);
    indentExpr = "^" substr($0, 1, RLENGTH);
}

inBody {
    sub(indentExpr, "");

    line = $0;
    if (line ~ /[$]/) {
        line = varSubst(line);
    }

    body = body line "\n";
}

END {
    message = vars["message"];

    if (short) {
        print "";
        print shorten(message, vars["name"]);
    } else {
        print message;
    }
}

# Performs "shortening," by only including newline-separated sections that start
# with the given string.
function shorten(orig, matchStr, _withLocals_, at) {
    out = "";
    orig = "\n" orig;         # Simplifies matching.
    matchStr = "\n" matchStr; # Likewise.

    while (orig != "") {
        at = index(orig, matchStr);
        if (at == 0) {
            break;
        }
        orig = substr(orig, at + 1);
        match(orig, /\n\n|\n*$/);
        out = out substr(orig, 1, RSTART);
        orig = substr(orig, RSTART + 1);
    }

    sub(/\n+$/, "", out); # Drop final `\n`s.
    return out;
}

# Performs variable substitutions on the given line.
function varSubst(line, _withLocals_, endAt, matchStr, out) {
    out = "";

    while (line != "") {
        if (!match(line, /[$]([$]|[{][a-z]+[}])?/)) {
            break;
        }

        out = out substr(line, 1, RSTART - 1);
        matchStr = substr(line, RSTART, RLENGTH);
        line = substr(line, RSTART + RLENGTH);

        if ((matchStr == "$") || (matchStr == "$$")) {
            # `$$` or non-variable `$`.
            out = out "$";
        } else {
            gsub(/^\$\{|\}$/, "", matchStr);
            if (matchStr in vars) {
                out = out vars[matchStr];
            } else {
                out = out "${UNKNOWN VARIABLE " matchStr "}";
            }
        }
    }

    return out line;
}'
