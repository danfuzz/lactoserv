#!/bin/bash
#
# Copyright 2022-2023 the Bashy-lib Authors (Dan Bornstein et alia).
# SPDX-License-Identifier: Apache-2.0

. "$(dirname "$(readlink -f "$0")")/_init.sh" || exit "$?"


#
# Argument parsing
#

define-usage --with-help $'
    ${name} [<opt> ...] [--] <command> <arg> ...

    Default (sub)command runner, for a command with subcommands being invoked on
    a (sub)command that doesn\'t have a script. That is, this is for the case
    where the named (sub)command indicates a directory of subcommands that does
    not have a default `_run` script in it.

    This prints a list of available subcommands.

    --original-command=<words>
      The space-separated list of words for the originally-called command.
    --original-path=<path>
      The filesystem path to the originally-called command. This will always
      be a path to a directory.
'

# List of words of the original command.
opt-value --required --var=origCmdWords original-command

# Path to the original command.
opt-value --required --var=origCmdPath original-path

# The main command.
positional-arg --var=command command

# The original command arguments, including any subcommands and other arguments.
rest-arg --var=origArgs args

process-args "$@" || usage --short


#
# Main script
#

this-cmd-name --set "${origCmdWords}"

# Split the words of the command.
origCmdWords=(${origCmdWords})

# Drop any subcommands off of `args`.
cmdWordCount="${#origCmdWords[@]}"
if (( cmdWordCount > 1 )); then
    args=("${origArgs[@]:cmdWordCount}")
fi

error=0
if (( ${#origArgs[@]} > 0 )) && [[ ${origArgs[0]:0:1} != '-' ]]; then
    error-msg "No such subcommand: ${origArgs[0]}"
    error-msg ''
    error=1
fi

lib helpy print-subcommands "${origCmdWords[@]}"
exit "${error}"
