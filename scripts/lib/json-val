#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License, Version 2.0.
# Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Load the helper libraries.
. "$(dirname "$(readlink -f "$0")")/init.sh" || exit "$?"

#
# Argument parsing
#

function usage {
    print-usage $'
    Usage:

    ${name} [<opt> ...] [--] [<assignment> ...] [--] [<jq-expression> ...]
      Constructs and prints one or more JSON values from variable assignments
      passed into an expression evaluated by `jq` either with `--null-input` (by
      default) or as a usual pipeline over input values. If no expression is
      given, it is taken to be `.`, which will end up formatting the input as
      implied/specified by the output option.

      The <jq-expression> arguments are concatenated together (separated by
      spaces) to form the final expression to be evaluated.

      <assignment>
        <name>=<value> Assign `$name` to be the indicated string value.
        <name>:json=<value> Assign `$name` to be the indicated parsed JSON value.

      --input=<style>
        `none` -- Do not read from stdin. This is the default.
        `read` -- Read values from stdin individually to form pipeline input.
        `slurp` -- Read all values from stdin into a single array, producing a
          single-value pipeline input.
      --output=<style>
        `compact` -- Output in compact (single line) JSON form.
        `json` -- Output in multiline JSON form. This is the default.
        `lines` -- Output each item as a single line. Similar to `raw`, except
          that strings with newlines or CRs in them get treated as non-raw so as
          to maintain the guarantee of item-per-line.
        `none` -- Suppress all non-error output.
        `raw` -- Output strings as raw text (and other values as `compact`).
        `words` -- Like `lines`, except that the guarantee is a word per line.
          As such, strings containing whitespace get treated as non-raw.

    ${name} [--help | -h]
      Displays this message.
    '

    exit "$@"
}

# Want help?
opt-action --call='{ usage }' help/h

# Input style.
opt-value --var=inputStyle --init=none --enum='none read slurp' input

# Output style.
opt-value --var=outputStyle --init=json \
    --enum='compact json lines none raw words' output

# List of variable assignments, as parallel arrays of type, name, and value.
varTypes=()
varNames=()
varValues=()

# Value construction expression.
valueExpression=''

rest-arg --call=parse-rest jval-exprs
function parse-rest {
    # Parse assignments.
    while (( $# > 0 )); do
        arg="$1"
        if [[ ${arg} == '--' ]]; then
            shift
            break
        fi

        [[ ${arg} =~ ^([_a-zA-Z0-9]+)(:[a-z]+)?=(.*)$ ]] \
        || break

        varNames+=("${BASH_REMATCH[1]}")
        varValues+=("${BASH_REMATCH[3]}")

        varType="${BASH_REMATCH[2]}"
        if [[ ${varType} == '' ]]; then
            varType='string'
        else
            varType="${varType:1}" # `:1` to drop the initial `:`.
        fi

        varTypes+=("${varType}")

        shift
    done

    # Construct the value expression from the remaining arguments.
    if (( $# == 0 )); then
        valueExpression='.'
    else
        valueExpression="$*"
    fi
}

process-args "$@" || usage "$?"


#
# Main script
#

jqArgs=()

case "${inputStyle}" in
    none)
        jqArgs+=('--null-input')
        ;;
    read)
        : # No additional arguments needed.
        ;;
    slurp)
        jqArgs+=('--slurp')
        ;;
esac

case "${outputStyle}" in
    compact)
        jqArgs+=('--compact-output')
        ;;
    lines)
        jqArgs+=('--raw-output' '--compact-output')
        lineHelper='
            if type == "string" and test("[\n\r]"; "m")
            then (. | @json)
            else .
            end'
        valueExpression="(${valueExpression}) | ${lineHelper}"
        ;;
    raw)
        jqArgs+=('--raw-output' '--compact-output')
        ;;
    words)
        jqArgs+=('--raw-output' '--compact-output')
        wordHelper='
            if type == "string" and test("[ \n\r\t]"; "m")
            then (. | @json)
            else .
            end'
        valueExpression="(${valueExpression}) | ${wordHelper}"
        ;;
esac

for (( i = 0; i < ${#varTypes[@]}; i++ )); do
    varType="${varTypes[${i}]}"
    case "${varType}" in
        json)
            jqArgs+=('--argjson')
            ;;
        string)
            jqArgs+=('--arg')
            ;;
        *)
            error-msg "Unrecognized variable type: ${varType}"
            exit 1
            ;;
    esac

    jqArgs+=("${varNames[${i}]}" "${varValues[${i}]}")
done

# Note: `jq` doesn't recognize `--` as an end-of-options sign, but generally
# speaking there's no ambiguity between a valid `jq` option and its program
# text. Nonetheless, we prepend an extra space if the program begins with a
# dash, just in case the user of this script passed in something wacky.
if [[ ${valueExpression} =~ ^- ]]; then
    valueExpression=" ${valueExpression}"
fi

jqArgs+=("${valueExpression}")

if [[ ${outputStyle} == 'none' ]]; then
    exec jq "${jqArgs[@]}" >/dev/null
else
    exec jq "${jqArgs[@]}"
fi
