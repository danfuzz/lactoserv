#!/bin/bash
#
# Copyright 2022-2023 the Lactoserv Authors (Dan Bornstein et alia).
# SPDX-License-Identifier: Apache-2.0

. "$(dirname "$(readlink -f "$0")")/_init.sh" || exit "$?"


TOOL_DEPENDENCIES='{
    "eslint": "^8.38.0",
    "eslint-plugin-jsdoc": "^43.0.7",
    "eslint-plugin-jest": "^27.0.4"
}'


#
# Argument parsing
#

define-usage $'
    ${name} [<opt> ...] <lint-arg> ...

    Runs the linter.

    --fix
      Fix whatever issues are fixable.
    --out=<dir>
      Directory where built output goes. Defaults to `out` directly under the
      main product directory.

    ${help}
'

# Want help?
opt-action --call='{ usage; exit }' help/h

# Perform fixes?
opt-toggle --var=doFix fix

# Built output directory.
opt-value --var=outDir out

# Arbitrary args to pass to the tool.
rest-arg --var=args args

process-args "$@" || usage --short


#
# Helper functions
#

# Builds the tool.
function build-tool {
    local name="$1"

    rm -rf node_modules "${name}" *.json

    jval >package.json \
        dependencies:json="${TOOL_DEPENDENCIES}" \
        '{ dependencies: $dependencies }'

    npm install \
    || return "$?"

    ln -s node_modules/.bin/eslint "${name}"
}


#
# Main script
#

srcDir="$(base-dir)/src"
outDir="$(lib buildy out-dir --out="${outDir}")" \
|| exit "$?"

toolDir="${outDir}/linter"
toolBinName='lint'
toolBinary="${toolDir}/${toolBinName}"

if [[ ! -x ${toolBinary} ]]; then
    mkdir -p "${toolDir}"
    (
        cd "${toolDir}"
        build-tool "${toolBinName}"
    ) \
    || exit "$?"
fi

configFile=($(
    find "${srcDir}" -mindepth 1 -maxdepth 1 -name '.eslintrc*'
))
if (( ${#configFile[@]} != 1 )); then
    if (( ${#configFile[@]} == 0 )); then
        error-msg 'No ESLint config file!'
    else
        error-msg 'No unique ESLint config file!'
    fi
    exit 1
fi

opts=(
    --config "${configFile}"
    --resolve-plugins-relative-to "${toolDir}"
    --cache --cache-location "${toolDir}/cache"
    --max-warnings 0
)

if (( doFix )); then
    opts+=(--fix)
fi

if (( ${#args[@]} == 0 )); then
    # Run over all of the source by default.
    args=("${srcDir}")
fi

"${toolBinary}" "${opts[@]}" -- "${args[@]}"
status="$?"

info-msg

if (( ${status} == 0 )); then
    info-msg 'No linter errors! Yay!'
else
    error-msg --no-name 'Linter errors. Alas.'
    exit "${status}"
fi
