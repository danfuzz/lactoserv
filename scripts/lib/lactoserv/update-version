#!/bin/bash
#
# Copyright 2022-2025 the Lactoserv Authors (Dan Bornstein et alia).
# SPDX-License-Identifier: Apache-2.0

. "$(dirname "$(readlink -f "$0")")/_init.sh" || exit "$?"


#
# Argument parsing
#

define-usage --with-help $'
    ${name} [<opt> ...] <version>

    Updates the version of the project. <version> is the version number.
'

# Version number.
positional-arg --var=versionNumber --filter='/^v?[0-9]+\.[0-9]+\.[0-9]+$/' \
    version

process-args "$@" || exit "$?"


#
# Main script
#

baseDir="$(base-dir)"
mainModuleDir="${baseDir}/src/main-lactoserv"
changelogPath="${baseDir}/CHANGELOG.md"
tmpPath="${baseDir}/tmp.txt"

if [[ ${versionNumber} =~ ^v(.*)$ ]]; then
    # Drop the `v` prefix.
    versionNumber="${BASH_REMATCH[1]}"
fi

for f in "${mainModuleDir}/package.json" "${mainModuleDir}/package-lock.json"; do
    progress-msg "Updating: ${f}"
    lib >"${tmpPath}" jget --file="${f}" \
        versionNumber="${versionNumber}" '
        .version = $versionNumber
        |
        if .packages[""] then
            .packages[""].version = $versionNumber
        else
            .
        end
    ' \
    || exit "$?"

    mv "${tmpPath}" "${f}"
done

lib node-project fix-package-json "${mainModuleDir}/package.json"

progress-msg "Updating: ${changelogPath}"

header="v${versionNumber} -- $(date '+%Y-%m-%d')"
awk <"${changelogPath}" >"${tmpPath}" \
    -v header="${header}" '
BEGIN {
    collecting = 0;
    count = 0;
}

$0 == "### [Unreleased]" {
    collecting = 1;
    next; # No need to store this line.
}

collecting && (count != 0) && /^###/ {
    collecting = 0;

    print "### [Unreleased]";
    print "";
    print "Breaking changes:";
    print "* None.";
    print "";
    print "Other notable changes:";
    print "* None.";
    print "";
    print "### " header;

    if ((lines[2] == "* None.") && (lines[5] == "* None.")) {
        # There was already a fresh next-release section, so we are all done.
    } else {
        # `lines` has the section to mark with the version.
        for (i = 0; i < count; i++) {
            print lines[i];
        }

        # The current line is the start of the next section.
        print;
    }

    next;
}

collecting {
    lines[count] = $0;
    count++;
    next;
}

{ print; }
' \
|| exit "$?"

mv "${tmpPath}" "${changelogPath}"

progress-msg 'Done!'
