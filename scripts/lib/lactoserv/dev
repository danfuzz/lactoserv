#!/bin/bash
#
# Copyright 2022-2024 the Lactoserv Authors (Dan Bornstein et alia).
# SPDX-License-Identifier: Apache-2.0

. "$(dirname "$(readlink -f "$0")")/_init.sh" || exit "$?"


#
# Argument parsing
#

define-usage --with-help $'
    ${name} [<opt> ...] [<target> ...]

    Does various development-time actions for the project. By default, this
    executes the target `build` unless otherwise overridden by options.

    Available targets: `clean` `build` `distro` `run`

    --out=<dir>
      Directory where built output goes. Defaults to `out` directly under the
      main product directory.
    --run-args[]=<arg> ...
      Arguments to pass to the system when `run`ning. This makes the default
      target be `run`.
'

# Make a distribution tarball?
opt-toggle --var=doDistro make-distro

# Built output directory.
opt-value --var=outDir out

# Arguments for running.
opt-multi --var=runArgs run-args

# Build targets.
rest-arg --var=targets --filter='/^[a-z]+/' target

process-args "$@" || exit "$?"


#
# Build targets
#

# Target: `clean`
function target-clean {
    rm -rf "${outDir}"
    mkdir -p "${outDir}"
}

# Target: `distro`
function target-distro {
    satisfy-target build \
    || return "$?"

    progress-msg 'Making distribution tarball...'

    lib buildy make-distro --out="${outDir}" "${outDir}/lactoserv"
}

# Target: `build`
function target-build {
    # Run in a subshell so that `env-minimize` has no lasting effect.
    (
        true \
        && env-minimize \
        && lib node-project build-main-module \
            --out="${outDir}" --modules-dirs="${srcDir}" \
            --runner-script=run --runner-versions[]='20 21' \
            lactoserv
    )
}

# Target: `run`
function target-run {
    # See below for where the system is actually run. What we do here is just
    # ensure that it's built.
    if [[ ! -x ${outRun} ]]; then
        satisfy-target build \
        || return "$?"
    fi
}


#
# Main script
#

# Make a temporary directory, and arrange for its deletion upon exit.
tmpDir="$(lib tempy mkdir)" || exit "$?"
trap "rm -rf \"${tmpDir}\"" EXIT

include-lib buildy-help --tmp-dir="${tmpDir}"

srcDir="$(base-dir)/src"
outDir="$(set-up-out-dir --out="${outDir}")" || exit "$?"
outRun="${outDir}/lactoserv/bin/run"

if (( ${#targets[@]} == 0 )); then
    if (( ${#runArgs[@]} != 0 )); then
        targets=(run)
    else
        targets=(build)
    fi
fi

satisfy-all-targets "${targets[@]}" \
|| exit "$?"

if [[ " ${targets[*]} " =~ ' run ' ]]; then
    # We don't run inside `satisfy-all-targets`, because that would have the
    # build step capturing the run output (and indenting it, etc. etc.). So, we
    # just check here if that was a target, and use it to trigger a run.
    progress-msg
    progress-msg 'Running the system...'
    exec "${outRun}" \
        --log-to-stdout \
        --config="$(base-dir)/etc/example-setup/config/config.mjs" \
        "${runArgs[@]}"
fi
