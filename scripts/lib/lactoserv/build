#!/bin/bash
#
# Copyright 2022-2024 the Lactoserv Authors (Dan Bornstein et alia).
# SPDX-License-Identifier: Apache-2.0

. "$(dirname "$(readlink -f "$0")")/_init.sh" || exit "$?"


#
# Argument parsing
#

define-usage --with-help $'
    ${name} [<opt> ...] [<target> ...]

    Builds the project. By default, this executes the target `build`.

    Available targets: `clean` `build` `distro`

    --out=<dir>
      Directory where built output goes. Defaults to `out` directly under the
      main product directory.
'

# Make a distribution tarball?
opt-toggle --var=doDistro make-distro

# Built output directory.
opt-value --var=outDir out

# Build targets.
rest-arg --var=targets --filter='/^[a-z]+/' target

process-args "$@" || exit "$?"


#
# Build targets
#

# Target: `clean`
function target-clean {
    rm -rf "${outDir}"
    mkdir -p "${outDir}"
}

# Target: `distro`
function target-distro {
    satisfy-target build \
    || return "$?"

    progress-msg 'Making distribution tarball...'

    lib buildy make-distro --out="${outDir}" "${outDir}/lactoserv"
}

# Target: `build`
function target-build {
    # Run in a subshell so that `env-minimize` has no lasting effect.
    (
        true \
        && env-minimize \
        && lib node-project build-main-module \
            --out="${outDir}" --modules-dirs="${srcDir}" \
            --runner-script=run --runner-versions[]='20 21' \
            lactoserv
    )
}


#
# Main script
#

# Make a temporary directory, and arrange for its deletion upon exit.
tmpDir="$(lib tempy mkdir)" || exit "$?"
trap "rm -rf \"${tmpDir}\"" EXIT

include-lib buildy-help --tmp-dir="${tmpDir}"

outDir="$(set-up-out-dir --out="${outDir}")" || exit "$?"
srcDir="$(base-dir)/src"

if (( ${#targets[@]} == 0 )); then
    targets=(build)
fi

satisfy-all-targets "${targets[@]}"
