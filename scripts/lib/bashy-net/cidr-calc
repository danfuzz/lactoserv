#!/bin/bash
#
# Copyright 2022-2023 the Bashy-lib Authors (Dan Bornstein et alia).
# SPDX-License-Identifier: Apache-2.0

. "$(dirname "$(readlink -f "$0")")/_init.sh" || exit "$?"


#
# Argument parsing
#

# Prints the usage message.
define-usage $'
    ${name} [<opt> ...] <command> <arg> ...

    Performs a calculation of some sort on a CIDR address/mask. Input CIDR values
    can be either standard-form strings or parsed JSON values (such as are
    produced by the `--output=json` option of this tool).

    --output=<style> :: `compact` `json` `lines`
      Output style, as with `json-val`. Defaults to `lines`, which produces a
      series of one or more standard-form CIDRs, one per line.

    Commands:

    add-to-network <cidr> <amount>
      Adds the given amount (a positive integer) to the network address, and
      prints the resulting CIDR. This can be used in conjunction with `widen-to`
      to enumerate subnet addresses (though `make-subnets` is more convenient for
      that use case). `<amount>` can be specified either in decimal or hex. Use
      the suggestive prefix `::` to indicate hex.
    address-length <cidr>
      Prints the length (number of bits) of the address (not just the netmask).
    address-words
      Prints the words (16-bit components) of the full address, in a shell-
      friendly space-separated decimal form. Note: Even an IPv4 address gets
      chunked as 16-bit words by this command.
    make-subnets <cidr> <count> [<bits>]
      Prints the indicated number of subnets of the given CIDR, created by
      widening the netmask and filling in the new bits with the sequence of `0`
      through `<count> - 1`. By default, the netmask is widened by the minimum
      number of bits needed, but an optional third argument indicates a specific
      result netmask length in bits.
    netmask-length <cidr>
      Prints the length (number of bits) in the netmask.
    print <cidr>
      Prints a CIDR value.
    widen-to <cidr> <bits>
      Widens the address in a CIDR by adding enough low-order zero bits to result
      in the indicated length. Prints the resulting CIDR.

    ${name} [--help | -h]

    Displays this message.
'

# Output style.
opt-value --var=outputStyle --init=lines --enum='compact json lines' output

# Want help?
opt-action --call='{ usage; exit }' help/h

# Command.
positional-arg --required --var=command command

# Command arguments.
rest-arg --var=args args

process-args "$@" || usage --short


#
# Helper functions
#

# Gets the number of bits needed to represent N values (e.g. the numbers
# 0..(N-1)).
function bits-needed {
    local n="$1"
    local count=0

    while (( n > 0 )); do
        (( count++ ))
        (( n >>= 1 ))
    done

    echo "${count}"
}

# Validates and prints out the words (16-bit elements) of an IPv4 address,
# suitable for subsequent inclusion in a CIDR-JSON result.
function cidr-address-words-v4 {
    local address="$1"
    local errorMsg="Unparseable IPv4 address: ${address}"
    local result=()

    address=".${address}" # Avoids a special case for the first iteration.

    local num
    while [[ ${address} != '' ]]; do
        # `0*` below strips leading zeros, so that the number doesn't get
        # interpreted as octal.
        if ! [[ ${address} =~ ^\.0*([0-9]+)(.*)$ ]]; then
            error-msg "${errorMsg}"
            return 1
        fi

        num="${BASH_REMATCH[1]}"
        address="${BASH_REMATCH[2]}"

        if (( num > 255 )); then
            error-msg "${errorMsg}"
            return 1
        fi

        result+=("${num}")
    done

    if (( ${#result[@]} != 4 )); then
        error-msg "${errorMsg}"
        return 1
    fi

    # The array form uses 16-bit words, so combine the four 8-bit octets to
    # to produce the final result.
    result=(
        $(( (${result[0]} << 8) + ${result[1]} ))
        $(( (${result[2]} << 8) + ${result[3]} ))
    )
    echo "${result[@]}"
}

# Validates and prints out the words (16-bit elements) of an IPv6 address,
# suitable for subsequent inclusion in a final CIDR-JSON result.
function cidr-address-words-v6 {
    local address="$1"
    local errorMsg="Unparseable IPv6 address: ${address}"
    local gotGap=0
    local nums=()

    if ! [[ ${address} =~ ^([:0-9a-f]*)(::([:0-9a-f]*))?$ ]]; then
        error-msg "${errorMsg}"
        return 1
    fi

    while [[ ${address} != '' ]]; do
        if [[ ${address} =~ ^::(.*)$ ]]; then
            if (( gotGap )); then
                # Double gap.
                error-msg "${errorMsg}"
                return 1
            fi
            gotGap=1
            nums+=(gap)
            address="${BASH_REMATCH[1]}"
        elif [[ ${address} =~ ^([0-9a-f]{1,4})((:.*)|$) ]]; then
            nums+=("0x${BASH_REMATCH[1]}")
            address="${BASH_REMATCH[2]}"
            if [[ ${address} =~ ^:([^:].*)$ ]]; then
                # Strip `:` separator but not `::` gap.
                address="${BASH_REMATCH[1]}"
            fi
        else
            error-msg "${errorMsg}"
            return 1
        fi
    done

    local zeroCount=0
    if (( gotGap )); then
        if (( ${#nums[@]} > 8 )); then
            error-msg "${errorMsg}"
            return 1
        fi
        (( zeroCount = 9 - ${#nums[@]} ))
    else
        if (( ${#nums[@]} != 8 )); then
            error-msg "${errorMsg}"
            return 1
        fi
    fi

    local result=()
    local n
    for n in "${nums[@]}"; do
        if [[ ${n} == 'gap' ]]; then
            while (( zeroCount > 0 )); do
                result+=(0)
                (( zeroCount-- ))
            done
        else
            # The math expression converts from hex to decimal.
            result+=("$(( n ))")
        fi
    done

    echo "${result[@]}"
}

# Converts a JSON-CIDR into a standard-form CIDR string.
function cidr-from-json {
    local cidr="$1"

    local type="$(jget --output=raw "${cidr}" '.type')"
    local netmaskBits="$(jget "${cidr}" '.netmaskBits')"
    local address

    case "${type}" in
        v4)
            address="$(cidr-v4-address "${cidr}" "${netmaskBits}")"
            ;;
        v6)
            address="$(cidr-v6-address "${cidr}")"
            ;;
        *)
            error-msg 'Unrecognized address type.'
            return 1
            ;;
    esac

    echo "${address}/${netmaskBits}"
}

# Prints out a V4 address from a CIDR in the usual form.
function cidr-v4-address {
    local cidr="$1"
    local netmaskBits="$2"

    local address="$(jget --output=raw "${cidr}" '
        [
            ((.address[0] / 256) | floor | tostring),
            ((.address[0] % 256) | tostring),
            ((.address[1] / 256) | floor | tostring),
            ((.address[1] % 256) | tostring)
        ]
        | join(".")
    ')"

    echo "${address}"
}

# Prints out a V6 address from a CIDR in the usual form.
function cidr-v6-address {
    local cidr="$1"

    local address="$(
        jget --output=raw "${cidr}" '.address | map(tostring) | join(" ")'
    )"

    # Go from space-separated string to array of elements.
    address=(${address})

    local zerosAt=-1
    local zeroCount

    # Find a run of zeros, if any.
    local n z
    zeroCount=1 # Avoid detecting runs of length 1.
    for (( n = 0; n < 8; n++ )); do
        for (( z = n; z < 8; z++ )); do
            if (( address[z] != 0)); then
                break
            fi
        done

        local thisCount
        (( thisCount = z - n ))
        if (( thisCount > zeroCount )); then
            (( zeroCount = thisCount ))
            (( zerosAt = n ))
        fi

        (( n = z )) # No need to "relitigate" anything that's been scanned.
    done

    local result=''
    local n
    for (( n = 0; n < 8; n++ )); do
        if (( n == zerosAt )); then
            result+='::'
            (( n += zeroCount - 1 ))
        else
            if ! ( [[ ${result} =~ :$ ]] || (( n == 0 )) ); then
                result+=':'
            fi

            result+="$(printf '%x' "${address[${n}]}")"
        fi
    done

    echo "${result}"
}

# Get or validate a JSON-CIDR from the given value. If a standard-form string,
# converts it. If JSON, validates it.
function json-from-any {
    local value="$1"

    if [[ ${value} =~ ^'{' ]]; then
        json-validate "${value}"
    elif [[ ${value} =~ ^[:./0-9a-f]+$ ]]; then
        json-from-cidr "${value}"
    else
        error-msg "Unparseable CIDR: ${value}"
        return 1
    fi
}

# Converts a standard form CIDR string to the JSON form.
function json-from-cidr {
    local cidr="$1"

    # Note: The repetition limits are generous enough to cover everything valid.
    if ! [[ ${cidr} =~ ^([.:0-9a-f]{1,100})/([0-9]{0,5})$ ]]; then
        error-msg "Unparseable CIDR: ${cidr}"
        return 1
    fi

    local address="${BASH_REMATCH[1]}"
    local netmaskBits="${BASH_REMATCH[2]}"
    local totalBits
    local type

    if [[ ${address} =~ : ]]; then
        # It's apparently IPv6.
        type=v6
        totalBits=128
        address=($(cidr-address-words-v6 "${address}")) \
        || return "$?"
    elif [[ ${address} =~ [.] ]]; then
        # It's apparently IPv4.
        type=v4
        totalBits=32
        address=($(cidr-address-words-v4 "${address}")) \
        || return "$?"
    else
        error-msg "Unparseable CIDR: ${value}"
        return 1
    fi

    if (( netmaskBits > totalBits )); then
        error-msg "Netmask too large: ${netmaskBits} bits"
        return 1
    fi

    address=($(mask-address-words "${netmaskBits}" "${address[@]}"))

    jval \
        address:json="$(jarray "${address[@]}")" \
        netmaskBits:json="${netmaskBits}" \
        type="${type}" \
        '{
            address: $address,
            netmaskBits: $netmaskBits,
            type: $type
        }'
}

# Validates a JSON-CIDR value. On success, prints the value.
function json-validate {
    local value="$1"

    # This doesn't check every possible problem, but it should be sufficient to
    # catch _unintentional_ misuse.
    local result
    result="$(jval cidr:json="${value}" \
        '
            (($cidr | type) == "object")
        and (($cidr | keys) == ["address", "netmaskBits", "type"])
        and (($cidr.address | type) == "array")
        and (($cidr.netmaskBits | type) == "number")
        and (($cidr.netmaskBits >= 0) and ($cidr.netmaskBits <= 128))
        and (($cidr.type == "v4") or ($cidr.type == "v6"))
        |
        if . then $cidr else null end
        '
    )" \
    || return "$?"

    if [[ ${result} == 'null' ]]; then
        error-msg "Malformed JSON-CIDR: ${value}"
        return 1
    fi

    echo "${result}"
}

# Helper for `json-from-cidr`, which masks a list of address words with a
# netmask (that is, logical-ANDs the address with the netmask). This
# canonicalizes an address being used as a network specifier.
function mask-address-words {
    local netmaskBits="$1"
    shift
    local address=("$@")

    local at partialBits
    (( at = netmaskBits / 16 ))
    (( partialBits = netmaskBits % 16 ))

    if (( partialBits != 0 )); then
        # Mask off the top part of the word that contains the final bit(s) of
        # the network portion of the address.
        local mask
        (( mask = (1 << (partialBits + 1)) - 1 ))
        (( mask <<= 16 - partialBits  ))
        (( address[at] &= mask ))
        (( at++ ))
    fi

    while (( at < ${#address[@]} )); do
        (( address[at] = 0 ))
        (( at++ ))
    done

    echo "${address[@]}"
}

# Parses an integer in one of the standard forms.
function parse-number {
    local num="$1"
    local min="$2"
    local max="$3"

    if [[ ${min} == '' ]]; then
        (( min = 0 ))
    fi

    if [[ ${max} == '' ]]; then
        (( max = 0xffffffff ))
        min='0'
    fi

    if [[ "${num}" =~ ^[0-9]{1,40}$ ]]; then
        if [[ "${num}" =~ ^0+(.+)$ ]]; then
            # Strip leading `0`s to prevent the number from being interpreted as
            # octal.
            num="${BASH_REMATCH[1]}"
        fi
    elif [[ "${num}" =~ ^::([0-9a-fA-F]{1,16})$ ]]; then
        num="0x${BASH_REMATCH[1]}"
    else
        error-msg "Unparseable number: ${num}"
        return 1
    fi

    (( num = num )) # Canonicalize to decimal.

    if (( num < min )); then
        error-msg "Number too small: ${num}"
        return 1
    elif (( num > max )); then
        error-msg "Number too large: ${num}"
        return 1
    fi

    echo "${num}"
}


#
# Command implementations
#

# Command: Add a value to the network address.
function command_add-to-network {
    case "$#" in
        0|1)
            error-msg 'Missing <cidr> and/or <amount> argument.'
            return 1
            ;;
        2)
            : # It's good.
            ;;
        *)
            error-msg 'Too many arguments.'
            return 1
            ;;
    esac

    local cidr="$1"
    local amount="$2"

    cidr="$(json-from-any "${cidr}")" \
    || return "$?"

    amount="$(parse-number "${amount}" 0 65535)" \
    || return "$?"

    local address=($(command_address-words "${cidr}"))
    local netmaskBits="$(jget "${cidr}" '.netmaskBits')"

    # Add the amount at the bottom of the network, that is, at the word which
    # has the last bit of the network and shifted appropriately so that lower
    # bits aren't affected.
    local at partialShift
    (( at = (netmaskBits - 1) / 16 ))
    (( partialShift = (16 - (netmaskBits % 16)) % 16 ))
    (( address[at] += amount << partialShift ))

    # Perform overflow to higher-order words as necessary.
    while (( (at > 0) && (address[at] > 0xffff) )); do
        (( address[at - 1] += address[at] >> 16 ))
        (( address[at] &= 0xffff ))
        (( at-- ))
    done

    if (( address[0] > 0xffff )); then
        error-msg "<amount> too large; address overflowed."
        return 1
    fi

    jval \
        cidr:json="${cidr}" \
        address:json="$(jarray "${address[@]}")" \
        '{
            type: $cidr.type,
            address: $address,
            netmaskBits: $cidr.netmaskBits
        }'
}

# Command: Gets the total number of bits in the address.
function command_address-length {
    case "$#" in
        0)
            error-msg 'Missing <cidr> argument.'
            return 1
            ;;
        1)
            : # It's good.
            ;;
        *)
            error-msg 'Too many arguments.'
            return 1
            ;;
    esac

    local cidr="$1"

    cidr="$(json-from-any "${cidr}")" \
    || return "$?"

    jget "${cidr}" '(.address | length) * 16'
}

# Command: Gets the words of the address.
function command_address-words {
    case "$#" in
        0)
            error-msg 'Missing <cidr> argument.'
            return 1
            ;;
        1)
            : # It's good.
            ;;
        *)
            error-msg 'Too many arguments.'
            return 1
            ;;
    esac

    local cidr="$1"

    cidr="$(json-from-any "${cidr}")" \
    || return "$?"

    jget --output=raw "${cidr}" '.address | map(tostring) | join(" ")'
}

# Command: Print a list of subnets.
function command_make-subnets {
    case "$#" in
        0|1)
            error-msg 'Missing <cidr> and/or <count> argument.'
            return 1
            ;;
        2|3)
            : # It's good.
            ;;
        *)
            error-msg 'Too many arguments.'
            return 1
            ;;
    esac

    local cidr="$1"
    local count="$2"
    local bits="$3"

    cidr="$(json-from-any "${cidr}")" \
    || return "$?"

    count="$(parse-number "${count}" 1 65535)" \
    || return "$?"

    local origBits="$(jget "${cidr}" '.netmaskBits')"
    local bitsNeeded="$(bits-needed "${count}")"
    local newBits

    (( newBits = origBits + bitsNeeded ))

    if [[ ${bits} != '' ]]; then
        bits="$(parse-number "${bits}" 1 999)" \
        || return "$?"

        if (( newBits > bits )); then
            error-msg "Specified <bits> is too small to fit result: ${bits}"
            return 1
        fi

        (( newBits = bits ))
    fi

    cidr="$(command_widen-to "${cidr}" "${newBits}")" \
    || return "$?"

    local result=()

    local n
    for (( n = 0; n < count; n++ )); do
        result+=("$(command_add-to-network "${cidr}" "${n}")") \
        || return "$?"
    done

    jarray "${result[@]}"
}

# Command: Gets the total number of bits in the address.
function command_netmask-length {
    case "$#" in
        0)
            error-msg 'Missing <cidr> argument.'
            return 1
            ;;
        1)
            : # It's good.
            ;;
        *)
            error-msg 'Too many arguments.'
            return 1
            ;;
    esac

    local cidr="$1"

    cidr="$(json-from-any "${cidr}")" \
    || return "$?"

    jget "${cidr}" '.netmaskBits'
}

# Command: Print a CIDR.
function command_print {
    case "$#" in
        0)
            error-msg 'Missing <cidr> argument.'
            return 1
            ;;
        1)
            : # It's good.
            ;;
        *)
            error-msg 'Too many arguments.'
            return 1
            ;;
    esac

    local cidr="$1"

    json-from-any "${cidr}"
}

# Command: Widen the network to a specific length.
function command_widen-to {
    case "$#" in
        0|1)
            error-msg 'Missing <cidr> and/or <bits> argument.'
            return 1
            ;;
        2)
            : # It's good.
            ;;
        *)
            error-msg 'Too many arguments.'
            return 1
            ;;
    esac

    local cidr="$1"
    local bits="$2"

    cidr="$(json-from-any "${cidr}")" \
    || return "$?"

    bits="$(parse-number "${bits}" 1 999)" \
    || return "$?"

    totalBits="$(command_address-length "${cidr}")"
    netmaskBits="$(jget "${cidr}" '.netmaskBits')"

    if (( bits < netmaskBits )); then
        error-msg "Cannot shrink netmask!: ${netmaskBits} to ${bits}"
        return 1
    elif (( bits > totalBits )); then
        error-msg "Resulting netmask too long: ${bits}"
        return 1
    fi

    jval \
        cidr:json="${cidr}" \
        netmaskBits:json="${bits}" \
        '{
            type: $cidr.type,
            address: $cidr.address,
            netmaskBits: $netmaskBits
        }'
}


#
# Main script
#

commandFunc="command_${command}"
if ! declare -F "${commandFunc}" >/dev/null; then
    error-msg "No such command: ${command}"
    exit 1
fi

result="$("${commandFunc}" "${args[@]}")" \
|| exit "$?"

case "${result}" in
    '['*)
        resultType=array
        ;;
    '{'*)
        resultType=object
        ;;
     *)
        resultType=text
        ;;
esac

if [[ ${resultType} != 'text' ]]; then
    # A JSON result is interpreted as a CIDR or list thereof, in which case the
    # output style matters.
    case "${outputStyle}" in
        lines)
            if [[ ${resultType} == 'object' ]]; then
                cidr-from-json "${result}"
            else
                # It's an array. Compactly print each JSON result element on a
                # line by itself, then split by lines to convert each object.
                jget --output=compact "${result}" '.[]' \
                | while read -r line; do
                    cidr-from-json "${line}"
                done
            fi
            ;;
        *)
            jget --output="${outputStyle}" "${result}" '.'
            ;;
    esac
else
    # Arbitrary text and not a CIDR or list of same. Just print the result.
    echo "${result}"
fi
