#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License, Version 2.0.
# Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Load the helper libraries.
. "$(dirname "$(readlink -f "$0")")/init.sh" || exit "$?"

#
# Argument parsing
#

function usage {
    print-usage $'
    Usage:

    ${name} [<opt> ...] [--] <value> [<jval-expr> ...]
    ${name} [--file=<path> <opt> ...] [--] [<jval-expr> ...]
      Performs an operation on a single JSON value (at least with typical usage).
      More specifically, a given <value> or the content of a file is used as the
      sole input to a `json-val` invocation consisting of the rest of the
      arguments. If no expression is given, it is taken to be `.`, which will
      end up just formatting the input value as implied/specified by the output
      options.

      --file=<path>
        Read from the file instead of taking a value as a positional argument.
      --output=<style>
        Same options as with `json-val` (see which).

    ${name} [--help | -h]
      Displays this message.
    '

    exit "$@"
}

# Want help?
opt-action --call='{ usage }' help/h

# File to read.
opt-value --var=filePath file

# Output style.
opt-value --var=outputStyle --init=json \
    --enum='compact json lines none raw raw:slurp raw0 raw0:slurp words' output

# Value to operate on. (Will actually be the first expression if `--file` is
# used.)
positional-arg --required --var=value value

# Expressions to operate on the value.
rest-arg --var=exprArgs jval-exprs

process-args "$@" || usage "$?"

if [[ ${filePath} != '' ]]; then
    if [[ ${value} != '' ]]; then
        exprArgs=("${value}" "${exprArgs[@]}")
        value=''
    fi
fi

if (( ${#exprArgs[@]} == 0 )); then
    exprArgs=('.')
fi


#
# Main script
#


jvalArgs=(--output="${outputStyle}" --input=read -- "${exprArgs[@]}")

if [[ ${filePath} != '' ]]; then
    if [[ ! -r "${filePath}" ]]; then
        error-msg "Cannot read file: ${filePath}"
        exit 1
    fi
    lib json-val "${jvalArgs[@]}" <"${filePath}"
else
    lib json-val "${jvalArgs[@]}" <<<"${value}"
fi
