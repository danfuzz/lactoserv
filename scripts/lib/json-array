#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License, Version 2.0.
# Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Load the helper libraries.
. "$(dirname "$(readlink -f "$0")")/init.sh" || exit "$?"

#
# Argument parsing
#

function usage {
    print-usage $'
    Usage:

    ${name} [<opt> ...] [--] [<value> ...]
      Constructs and prints a JSON array of values, of all of the value arguments
      passed to this command.

      --input=<style>
        `json` -- Treat arguments as JSON values. This is the default.
        `strings` -- Treat arguments as literal strings.
      --output=<style>
        `compact` -- Output in compact (single line) JSON form.
        `json` -- Output in multiline JSON form. This is the default.

    ${name} [--help | -h]
      Displays this message.
    '

    exit "$@"
}

# Want help?
opt-action --call='{ usage }' help/h

# Output style.
opt-value --var=outputStyle --init=json --enum='compact json' output

# Input style.
opt-value --var=inputStyle --init=json --enum='json strings' input

# The array elements.
rest-arg --var=values values

process-args "$@" || usage "$?"


#
# Main script
#

# Note: An earlier -- and to be clear buggy -- version of this script tried to
# use `jq`'s options `--args` or `--jsonargs` which promised to make this script
# much simpler. Unfortunately, because `jq` doesn't actually do the usual shell
# command behavior of not attempting to interpret things that look like options
# but are positioned after non-option arguments, it's not actually possible to
# use `--args` or `--jsonargs`, especially if we want to be resilient to errant
# input to this script (and not blithely pass it into a `jq` which will do
# who-knows-what with it).

jqArgs=(--null-input)

if [[ ${outputStyle} == 'compact' ]]; then
    jqArgs+=('--compact-output')
fi

if [[ ${inputStyle} == 'strings' ]]; then
    argOpt='--arg'
else
    argOpt='--argjson'
fi

expr=''
for (( n = 0; n < ${#values[@]}; n++ )); do
    jqArgs+=("${argOpt}" "a${n}" "${values[${n}]}")
    if (( n != 0 )); then
        expr+=','
    fi
    expr+='$a'"${n}"
done

exec jq "${jqArgs[@]}" "[${expr}]"
