#!/bin/bash
#
# Copyright 2022 Dan Bornstein. All rights reserved.
# All code and assets are considered proprietary and unlicensed.

. "$(dirname "$(readlink -f "$0")")/lib/init.sh" || exit "$?"

ESLINT_VERSION='8.22.0'
JSDOC_VERSION='39.3.6'

#
# Argument parsing
#

function usage {
    print-usage $'
    Usage:

    ${name} [<opt> ...] <lint-arg> ...
      Runs the linter.

    --out=<dir>
      Directory where built output goes. Defaults to `out` directly under the
      main product directory.

    ${name} [--help | -h]
      Displays this message.
    '

    exit "$@"
}

# Want help?
opt-action --call='{ usage }' help/h

# Built output directory.
opt-value --var=outDir out

# Arbitrary linter args.
rest-arg --var=lintArgs lint-args

process-args "$@" || usage "$?"


#
# Helper functions
#

# Builds the linter.
function build-lint {
    local name="$1"

    rm -rf node_modules "${name}" *.json

    jval >package.json \
        eslintVersion="${ESLINT_VERSION}" \
        jsdocVersion="${JSDOC_VERSION}" \
        '{
            dependencies: {
                "eslint": ("^" + $eslintVersion),
                "eslint-plugin-jsdoc": ("^" + $jsdocVersion)
            }
        }'

    npm install \
    || return "$?"

    ln -s node_modules/.bin/eslint "${name}"
}


#
# Main script
#

baseDir="$(dirname "$(this-cmd-dir)")"
srcDir="${baseDir}/src"
outDir="$(lib out-dir --out="${outDir}")" \
|| exit "$?"

lintDir="${outDir}/linter"
lintBinName='lint'
lintBinary="${lintDir}/${lintBinName}"

configFile=($(
    find "${baseDir}" -mindepth 1 -maxdepth 1 -name '.eslintrc*'
))
if (( ${#configFile[@]} != 1 )); then
    if (( ${#configFile[@]} == 0 )); then
        error-msg 'No ESLint config file!'
    else
        error-msg 'No unique ESLint config file!'
    fi
    exit 1
fi

if [[ ! -x ${lintBinary} ]]; then
    mkdir -p "${lintDir}"
    cd "${lintDir}"
    build-lint "${lintBinName}" \
    || exit "$?"
fi

if (( ${#lintArgs[@]} == 0 )); then
    # Run over all of source by default.
    lintArgs=("${srcDir}")
fi

"${lintBinary}" \
    --config "${configFile}" \
    --resolve-plugins-relative-to "${lintDir}" \
    --cache --cache-location "${lintDir}/cache" \
    --max-warnings 0 \
    -- "${lintArgs[@]}"
status="$?"

info-msg

if (( ${status} == 0 )); then
    info-msg 'No linter errors! Yay!'
else
    error-msg --no-name 'Linter errors. Alas.'
    exit "${status}"
fi
